<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一盒酥</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ihozh.com/"/>
  <updated>2017-09-07T21:34:04.000Z</updated>
  <id>http://ihozh.com/</id>
  
  <author>
    <name>一盒酥</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>贝叶斯统计初探</title>
    <link href="http://ihozh.com/2017/08/31/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BB%9F%E8%AE%A1%E5%88%9D%E6%8E%A2/"/>
    <id>http://ihozh.com/2017/08/31/贝叶斯统计初探/</id>
    <published>2017-09-01T03:46:44.000Z</published>
    <updated>2017-09-07T21:34:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引子："><a href="#引子：" class="headerlink" title="引子："></a>引子：</h1><p>贝叶斯统计和经典统计是两种不同的思考方法，有不同也有联系，一方面，不能把他们绝对地视为完全对立的不同方法。 另一方面，虽然在某些特殊条件下，贝叶斯统计和经典统计会在数学形式上表现得一模一样，但我们并不能简单的就在两个数学公式之间画个等号。为了探究关于贝叶斯和经典统计的不同思考方式，我像苦行僧一般修行，翻阅大量的资料，苦思冥想，最终悟出一二。就像突然悟出了某本武林秘籍的真谛，激动之情难以言表。现在就慢慢拨开贝叶斯统计的表象，看看他里边究竟是什么。   </p>
<p>不论是概率论，随机过程，系统辨识，还是机器学习，概率图模型，模式识别，贝叶斯都是一个不可能抹去的名字。这也是第一次，我感受到数学和哲学之间纠缠不清的暧昧关系，我也想先从哲学的角度去看看贝叶斯统计和经典统计。</p>
<a id="more"></a>
<p>简单来说，经典统计是对世界，对事件的客观认识。客观认识是符合直觉的，一个自然界的规律已经存在，如果想要了解这个规律，就要一遍遍的观察。就拿抛硬币这个最简单的例子来说，当一枚硬币造好的那一刻起，抛出正面和抛出反面的可能性就被决定了，只要一个有毅力的人不断的抛这枚硬币，一千次，一万次，根据弱大数定律，最终结果会无限逼近这个可能性，即出现多少次正面，多少次反面。这就是一个最简单的经典统计的例子，有些人发现了，要发现这个出现正反面的可能性，需要重复性的试验，所以这也被称作频率统计。自然规律已经存在，剩下的就是靠样本来发现。</p>
<p>贝叶斯统计，在哲学上完全相反。贝叶斯们认为这个世界是可以由我们主动认识的，不用被动的去接受自然规律，而是主动去找到这个自然规律。我认为，这也是理解贝叶斯统计的核心。为什么这么说呢？还是以抛硬币为例，硬币已经造好，如何通过有限次数的试验得到出现正反面的可能性？贝叶斯们认为，这枚银币什么可能都会有，它有可能每次都能抛出正面，也有可能每次都是反面，当然也有可能正反各占一半，这个概率，就是先验概率。引出另一个重要的概念，这个概率是一个随机变量的概率。硬币的每一种可能性，在贝叶斯们看来仅仅是一个随机变量。在这个假设条件下，即假设银币的正反可能性为某值，开始观察结果，根据条件概率，就可以得到当前结果下的可能性估计，这就是后验概率。</p>
<p>总结来看，经典统计是对世界的客观认识，而贝叶斯统计是对世界的主观认识。但是为什么客观认识的世界能和主观认识的世界是同样的呢？这是一个深奥的哲学问题，我不是哲学家，解答不了，并且这也超出了这篇文章的探索范围。 有好奇的朋友可以去看看杰恩斯的《概率论沉思录》，这本凝聚了他40年心血的著作有对这个问题透彻的思考。在这里我们认为主观和客观的世界完美的统一了。</p>
<h1 id="有坑："><a href="#有坑：" class="headerlink" title="有坑："></a>有坑：</h1><p>想要了解一个概念，首先看看不要怎样去认为它。在网络上很多分析贝叶斯和经典统计的文章提供了不同的视角和结论。有时候不能说这些结论不对，但是可能太过片面，让我走了不少弯路。   </p>
<ul>
<li><p>是否有先验分布<br>仅仅体现在数学公式上，如果贝叶斯的最大后验估计中的先验分布是均匀分布，那和经典统计的极大似然估计连数学公式都统一了，但是原理并不相同。</p>
</li>
<li><p>概率<br>贝叶斯统计的出现解决了一些只能用概率解释的问题。千万不要死磕概率的意义，除非想成为哲学家。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引子：&quot;&gt;&lt;a href=&quot;#引子：&quot; class=&quot;headerlink&quot; title=&quot;引子：&quot;&gt;&lt;/a&gt;引子：&lt;/h1&gt;&lt;p&gt;贝叶斯统计和经典统计是两种不同的思考方法，有不同也有联系，一方面，不能把他们绝对地视为完全对立的不同方法。 另一方面，虽然在某些特殊条件下，贝叶斯统计和经典统计会在数学形式上表现得一模一样，但我们并不能简单的就在两个数学公式之间画个等号。为了探究关于贝叶斯和经典统计的不同思考方式，我像苦行僧一般修行，翻阅大量的资料，苦思冥想，最终悟出一二。就像突然悟出了某本武林秘籍的真谛，激动之情难以言表。现在就慢慢拨开贝叶斯统计的表象，看看他里边究竟是什么。   &lt;/p&gt;
&lt;p&gt;不论是概率论，随机过程，系统辨识，还是机器学习，概率图模型，模式识别，贝叶斯都是一个不可能抹去的名字。这也是第一次，我感受到数学和哲学之间纠缠不清的暧昧关系，我也想先从哲学的角度去看看贝叶斯统计和经典统计。&lt;/p&gt;
    
    </summary>
    
      <category term="苦境" scheme="http://ihozh.com/categories/%E8%8B%A6%E5%A2%83/"/>
    
    
      <category term="概率论" scheme="http://ihozh.com/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
      <category term="贝叶斯" scheme="http://ihozh.com/tags/%E8%B4%9D%E5%8F%B6%E6%96%AF/"/>
    
  </entry>
  
  <entry>
    <title>Bernoulli process 伯努利过程</title>
    <link href="http://ihozh.com/2017/08/21/Bernoulli-process-%E4%BC%AF%E5%8A%AA%E5%88%A9%E8%BF%87%E7%A8%8B/"/>
    <id>http://ihozh.com/2017/08/21/Bernoulli-process-伯努利过程/</id>
    <published>2017-08-21T05:46:47.000Z</published>
    <updated>2017-09-01T03:46:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="伯努利试验和伯努利过程"><a href="#伯努利试验和伯努利过程" class="headerlink" title="伯努利试验和伯努利过程"></a>伯努利试验和伯努利过程</h1><p>当一系列的随机事件发生时，包含这些随机变量的集合，称为随机过程。</p>
<p>根据随机变量的不同，随机过程也有很多种，如伯努利过程（离散，无记忆），泊松过程（连续，无记忆），马尔可夫链（有记忆，不独立）等。伯努利过程是随机过程中最简单的形式。   </p>
<p>抛硬币是概率统计中一个著名的试验，每次抛出银币得到正面或者反面，抛第二次时和第一次的结果没有任何关联。每次抛硬币就是一个伯努利试验。</p>
<p>给出定义：</p>
<p>伯努利试验是只有两种可能结果的单次随机试验，对于一个随机变量X而言，有</p>
<ul>
<li>P(X=1)=p</li>
<li>P(X=0)=1-p   </li>
</ul>
<p>这就是一个yes or no 的问题</p>
<p>重复的独立同分布的伯努利试验就是伯努利过程。伯努利过程有三个常见的模型。</p>
<a id="more"></a>
<h1 id="二项分布"><a href="#二项分布" class="headerlink" title="二项分布"></a>二项分布</h1><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>二项分布（Binomial distribution）   </p>
<blockquote>
<p>例：随机抛出硬币n次，出现k次正面朝上的概率(S=k)，每次正面概率为p。   </p>
</blockquote>
<p>这是一个典型的二项分布问题。抛出正面为成功，结果为1；抛出反面为失败，记为0.在n次中有k次正面朝上，k次朝上的试验也是随机分布在k次试验中，可以得到二项分布的概率：</p>
<script type="math/tex; mode=display">P(S=k)=\binom{n}{k}p^k(1-p)^{n-k}</script><script type="math/tex; mode=display">E(S)=n\cdot p</script><script type="math/tex; mode=display">Var(S)=n\cdot p\cdot (1-p)</script><h2 id="二项式系数"><a href="#二项式系数" class="headerlink" title="二项式系数"></a>二项式系数</h2><p>二项分布之所以叫这个名字，因为二项分布的公式带二项系数。   </p>
<p>来看看帕斯卡／杨辉三角（Pascal’s triangle）：<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/Bernoulli%20process%20%E4%BC%AF%E5%8A%AA%E5%88%A9%E8%BF%87%E7%A8%8B/Pascal%27s%20triangle.gif" alt="Pascal triangle">   </p>
<p>每一个元素都是元素上方两元素相加得到。将第n行所有的元素加起来有 $2^n$，这也是n次试验的样本空间。第n行第k个元素对应n次试验，k次成功，n-k次失败的可能性。   </p>
<h2 id="几何上的理解"><a href="#几何上的理解" class="headerlink" title="几何上的理解"></a>几何上的理解</h2><p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/Bernoulli%20process%20%E4%BC%AF%E5%8A%AA%E5%88%A9%E8%BF%87%E7%A8%8B/Binomial%20coefficient.png" alt=""></p>
<h1 id="几何分布"><a href="#几何分布" class="headerlink" title="几何分布"></a>几何分布</h1><h2 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h2><p>几何分布（Geometric distribution）<br>几何分布的典型问题是第一次成功问题。将k次成功问题的反过来，第一次成功需要进过几次试验？</p>
<blockquote>
<p>例：连续抛硬币，第一次出现正面的概率（T=t）</p>
</blockquote>
<p>假设在第t次出现正面，则t次之前都会是反面</p>
<script type="math/tex; mode=display">P(T=t)=(1-p)^{t-1}p</script><script type="math/tex; mode=display">E(T)=\frac{1}{p}</script><script type="math/tex; mode=display">Var(T)=\frac{1-p}{p^2}</script><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>几何分布是无记忆的，并且分布具有相似性。每次新的试验与之前的结果无关。假如说已经抛了10次硬币并且都是反面，第11次抛硬币概率与第一次相同。如同将前十次的结果去掉，将剩下的部分归一化，得到的分布和第一次抛硬币的概率分布是完全相同的。   </p>
<h1 id="负二项分布"><a href="#负二项分布" class="headerlink" title="负二项分布"></a>负二项分布</h1><h2 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h2><p>第一次成功问题是几何分布，k次成功问题便是负二项分布。</p>
<blockquote>
<p>例：连续抛硬币，第k次出现正面的概率。</p>
</blockquote>
<script type="math/tex; mode=display">Y_k=T_1+...+T_k</script><p>考虑到第k次成功，就要考虑到第k-1次成功，k次成功和k-1次成功是独立的。其实可以换个角度来思考，即所有到成功k次时即终止的独立试验中，失败次数n-k的分布。也可以认为是k个独立的二项分布。</p>
<script type="math/tex; mode=display">P(Y_k=t)=\binom{t-1}{k-1}p^{k-1}(1-p)^{t-k}p</script><script type="math/tex; mode=display">E(Y_k)=\frac{k}{p}</script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;伯努利试验和伯努利过程&quot;&gt;&lt;a href=&quot;#伯努利试验和伯努利过程&quot; class=&quot;headerlink&quot; title=&quot;伯努利试验和伯努利过程&quot;&gt;&lt;/a&gt;伯努利试验和伯努利过程&lt;/h1&gt;&lt;p&gt;当一系列的随机事件发生时，包含这些随机变量的集合，称为随机过程。&lt;/p&gt;
&lt;p&gt;根据随机变量的不同，随机过程也有很多种，如伯努利过程（离散，无记忆），泊松过程（连续，无记忆），马尔可夫链（有记忆，不独立）等。伯努利过程是随机过程中最简单的形式。   &lt;/p&gt;
&lt;p&gt;抛硬币是概率统计中一个著名的试验，每次抛出银币得到正面或者反面，抛第二次时和第一次的结果没有任何关联。每次抛硬币就是一个伯努利试验。&lt;/p&gt;
&lt;p&gt;给出定义：&lt;/p&gt;
&lt;p&gt;伯努利试验是只有两种可能结果的单次随机试验，对于一个随机变量X而言，有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P(X=1)=p&lt;/li&gt;
&lt;li&gt;P(X=0)=1-p   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这就是一个yes or no 的问题&lt;/p&gt;
&lt;p&gt;重复的独立同分布的伯努利试验就是伯努利过程。伯努利过程有三个常见的模型。&lt;/p&gt;
    
    </summary>
    
      <category term="苦境" scheme="http://ihozh.com/categories/%E8%8B%A6%E5%A2%83/"/>
    
    
      <category term="微积分" scheme="http://ihozh.com/tags/%E5%BE%AE%E7%A7%AF%E5%88%86/"/>
    
      <category term="二项分布" scheme="http://ihozh.com/tags/%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83/"/>
    
      <category term="伯努利" scheme="http://ihozh.com/tags/%E4%BC%AF%E5%8A%AA%E5%88%A9/"/>
    
  </entry>
  
  <entry>
    <title>复数的矩阵表示</title>
    <link href="http://ihozh.com/2017/08/20/%E5%A4%8D%E6%95%B0%E7%9A%84%E7%9F%A9%E9%98%B5%E8%A1%A8%E7%A4%BA/"/>
    <id>http://ihozh.com/2017/08/20/复数的矩阵表示/</id>
    <published>2017-08-20T07:25:57.000Z</published>
    <updated>2017-09-01T03:47:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>复数的本质是找到一个域，在这个域中可以解决类似 $x^2+1=0$ 这种在实数域R下不能解决的问题。</p>
<p>Ahlfors在《COMPLEX ANALYSIS》一书中给出一种枚举 $\alpha+\beta i$ 构造复数域的方法并且给予证明。当然，还有其他的构造方法。</p>
<p>复数可以用类似平面的方式表示，在复平面中，横轴表示实数，纵轴表示虚数。但是复数域和平面空间并不是同构的。因为他们的维度不同。此外，在平面空间，并没有所谓的向量乘法，如何在平面空间使用乘法运算？</p>
<p>引入矩阵( $\alpha$, $\beta$ 都为实数)：   </p>
<script type="math/tex; mode=display">\begin{pmatrix}
\alpha & \beta\\
-\beta & \alpha
\end{pmatrix}</script><a id="more"></a>
<p>用矩阵表示复数。</p>
<p>定义：</p>
<script type="math/tex; mode=display">f(\alpha+\beta i)=
\begin{bmatrix}
\alpha & \beta\\
-\beta & \alpha
\end{bmatrix}</script><p>加法：</p>
<script type="math/tex; mode=display">f（(\alpha_1+\beta_1i)+(\alpha_2+\beta_2i))
=f((\alpha_1+\alpha_2)+(\beta_1+\beta_2)i)\\
=\begin{bmatrix}
\alpha_1+\alpha_2 & \beta_1+\beta_2\\
-\beta_1-\beta_2 & \alpha_1+\alpha_2
\end{bmatrix}
=\begin{bmatrix}
\alpha_1 & \beta_1\\
-\beta_1 & \alpha_1
\end{bmatrix}
+\begin{bmatrix}
\alpha_2 & \beta_2\\
-\beta_2 & \alpha_2
\end{bmatrix}</script><p>乘法：   </p>
<script type="math/tex; mode=display">f（(\alpha_1+\beta_1i)(\alpha_2+\beta_2i))
=f((\alpha_1\alpha_2-\beta_1\beta_2)+(\alpha_2\beta_1+\alpha_1\beta_2)i)\\
=\begin{bmatrix}
\alpha_1\alpha_2-\beta_1\beta_2 & \alpha_2\beta_1+\alpha_1\beta_2\\
-\alpha_2\beta_1-\alpha_1\beta_2 & \alpha_1\alpha_2-\beta_1\beta_2
\end{bmatrix}
=\begin{bmatrix}
\alpha_1 & b_1\\
-\beta_1 & \alpha_1
\end{bmatrix}
\begin{bmatrix}
\alpha_2 & \beta_2\\
-\beta_2 & \alpha_2
\end{bmatrix}</script><p>将矩阵分解：</p>
<script type="math/tex; mode=display">\begin{bmatrix}
\alpha & \beta\\
-\beta & \alpha
\end{bmatrix}
=\alpha\begin{bmatrix}
1 & 0\\
0 & 1
\end{bmatrix}
+\beta\begin{bmatrix}
0 & -1\\
-1 & 0
\end{bmatrix}
=\alpha I+\beta J</script><p>其中</p>
<script type="math/tex; mode=display">J^2=-1</script><p>另外，复数的共轭实际上是矩阵的转置。</p>
<script type="math/tex; mode=display">f(\alpha-\beta i)=
\begin{bmatrix}
\alpha & -\beta\\
\beta & \alpha
\end{bmatrix}</script><p>复数的模为矩阵的行列式。<br>使用极坐标的转换公式可以得到复数在极坐标下的表示。    </p>
<p>使用矩阵表示的好处，可以把复数的乘法和旋转联系起来。复数的乘法实际上就是在复数域上的旋转，2*2矩阵表示的就是平面上的旋转操作。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;复数的本质是找到一个域，在这个域中可以解决类似 $x^2+1=0$ 这种在实数域R下不能解决的问题。&lt;/p&gt;
&lt;p&gt;Ahlfors在《COMPLEX ANALYSIS》一书中给出一种枚举 $\alpha+\beta i$ 构造复数域的方法并且给予证明。当然，还有其他的构造方法。&lt;/p&gt;
&lt;p&gt;复数可以用类似平面的方式表示，在复平面中，横轴表示实数，纵轴表示虚数。但是复数域和平面空间并不是同构的。因为他们的维度不同。此外，在平面空间，并没有所谓的向量乘法，如何在平面空间使用乘法运算？&lt;/p&gt;
&lt;p&gt;引入矩阵( $\alpha$, $\beta$ 都为实数)：   &lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{pmatrix}
\alpha &amp; \beta\\
-\beta &amp; \alpha
\end{pmatrix}&lt;/script&gt;
    
    </summary>
    
      <category term="苦境" scheme="http://ihozh.com/categories/%E8%8B%A6%E5%A2%83/"/>
    
    
      <category term="矩阵" scheme="http://ihozh.com/tags/%E7%9F%A9%E9%98%B5/"/>
    
      <category term="复数" scheme="http://ihozh.com/tags/%E5%A4%8D%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Complex Analysis-Ahlfors学习笔记</title>
    <link href="http://ihozh.com/2017/08/19/Complex-Analysis-Ahlfors/"/>
    <id>http://ihozh.com/2017/08/19/Complex-Analysis-Ahlfors/</id>
    <published>2017-08-19T07:39:08.000Z</published>
    <updated>2017-09-01T03:47:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>书名：《COMPLEX ANALYSIS》<br>      An Introduction to the Theory of Analytic Functions of One Complex Variable   </p>
<p>作者： Lars V. Ahlfors<br>      哈佛大学 数学系    </p>
<p>版本： 3rd   </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/Complex%20Analysis-Ahlfors%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0Complex%20analysis-Lars%20V.%20Ahlfors.jpg" alt="Complex analysis-Lars V. Ahlfors.jpg"></p>
<a id="more"></a>
<h1 id="第一章-复数"><a href="#第一章-复数" class="headerlink" title="第一章 复数"></a>第一章 复数</h1><h2 id="1-1-复数的代数表示"><a href="#1-1-复数的代数表示" class="headerlink" title="1.1 复数的代数表示"></a>1.1 复数的代数表示</h2><h3 id="1-1-1-算数操作符"><a href="#1-1-1-算数操作符" class="headerlink" title="1.1.1 算数操作符"></a>1.1.1 算数操作符</h3><ul>
<li>复数代数表示：   <script type="math/tex; mode=display">\alpha+\beta i</script></li>
<li><p>实数的运算对复数同样适用，包括加减乘除   </p>
</li>
<li><p>1 $i^n$ y有四种可能值</p>
<script type="math/tex; mode=display">i^0=1,i^1=1,i^2=-1,i^3=-i</script></li>
</ul>
<h3 id="1-1-2-平方根"><a href="#1-1-2-平方根" class="headerlink" title="1.1.2 平方根"></a>1.1.2 平方根</h3><script type="math/tex; mode=display">\sqrt{\alpha+i\beta}=\\
\pm \left ( \sqrt{\frac{\alpha+\sqrt{\alpha^2+\beta^2}}{2}}
+i\frac{\beta}{|\beta|}
\sqrt{\frac{-\alpha+\sqrt{\alpha^2+\beta^2}}{2}} \right)</script><p>要注意选择符号符合的解。</p>
<h3 id="1-1-3-证明"><a href="#1-1-3-证明" class="headerlink" title="1.1.3 证明"></a>1.1.3 证明</h3><p>回顾一下实数，用符号R表示。首先R是一个域（field），这说明加法和乘法（addition and multiplication）是定义了的并且满足交换律（commutative law），结合律（associative law）和分配律（distributive law）。0和1分别是加法和乘法的中性元素（neutral elements）。与未知数相加相乘（本身不为0）都有解。每个域都是整环。     </p>
<p>关于整环，交换环，参考抽象代数（abstract algebra）。</p>
<p>此外，域还有个特性是顺序关联（order relation）。(1) 0 不是正数; (2) 如果a不等于0，a或者-a是正数; (3) 正数相加或者相乘还是正数。   </p>
<p>最后，R满足每一个增加和有界的序列都有限制。   </p>
<p>但是，$x^2+1=0$在R上没有解。假设有一个域F包括R，在F内，方程有解，为i，-i。再假设F内的子集域C，包括所有的 $\alpha+\beta i$。 不同的F得到不同的C，计为C‘，C和C’是同构的（field isomorphism）。</p>
<p>现在还没有证明F也存在同样的性质。</p>
<p>最简单的构造方法，枚举所有的 $\alpha+\beta i$（+和i仅仅当作符号）。定义加法和乘法。定义形式 $a+0i$ 是和R同构的子域，元素 $0 + i1$ 是$x^2+1=0$的解。得到 $(0 + i1)^2 = -(1 + i0)$。F域因此满足了要求，而且和C相同。</p>
<p>复数域的存在得证。</p>
<h3 id="1-1-4-共轭和绝对值"><a href="#1-1-4-共轭和绝对值" class="headerlink" title="1.1.4 共轭和绝对值"></a>1.1.4 共轭和绝对值</h3><p>因为方程有两个根，所以i和-i有相同的属性。用-i代替i就得到共轭。<br>对于复数 $a$ 有共轭 $\bar{a}$, 有如下属性：    </p>
<script type="math/tex; mode=display">\overline{a+b}=\overline{a}+\overline{b}</script><script type="math/tex; mode=display">\overline{ab}=\overline{a}\cdot\overline{b}</script><script type="math/tex; mode=display">a\overline{a}=|a|^2=\alpha^2+\beta^2</script><p>|a|被称做模或者绝对值。绝对值有属性：</p>
<script type="math/tex; mode=display">|a|=|\overline{a}|</script><script type="math/tex; mode=display">|ab|=|a|\cdot|b|</script><p>注意共轭和模的关系，相似的，在电力系统中，总功率也是PQ的共轭乘积。</p>
<h3 id="1-1-5-不等性"><a href="#1-1-5-不等性" class="headerlink" title="1.1.5 不等性"></a>1.1.5 不等性</h3><p>复数空间没有顺序关系，所以比较大小必须要用实数。<br>三角不等式（triangle inequality）：</p>
<script type="math/tex; mode=display">|a+b|\leq |a|+|b|</script><p>注意柯西不等式和拉格朗日恒等式<br>模平方=点乘平方+叉乘平方</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;书名：《COMPLEX ANALYSIS》&lt;br&gt;      An Introduction to the Theory of Analytic Functions of One Complex Variable   &lt;/p&gt;
&lt;p&gt;作者： Lars V. Ahlfors&lt;br&gt;      哈佛大学 数学系    &lt;/p&gt;
&lt;p&gt;版本： 3rd   &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrzpr.com1.z0.glb.clouddn.com/Complex%20Analysis-Ahlfors%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0Complex%20analysis-Lars%20V.%20Ahlfors.jpg&quot; alt=&quot;Complex analysis-Lars V. Ahlfors.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="苦境" scheme="http://ihozh.com/categories/%E8%8B%A6%E5%A2%83/"/>
    
    
      <category term="微积分" scheme="http://ihozh.com/tags/%E5%BE%AE%E7%A7%AF%E5%88%86/"/>
    
      <category term="复变函数" scheme="http://ihozh.com/tags/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0/"/>
    
      <category term="笔记" scheme="http://ihozh.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="经典" scheme="http://ihozh.com/tags/%E7%BB%8F%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>Python 模块化编程 - 笔记</title>
    <link href="http://ihozh.com/2017/06/27/Python-%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B-%E7%AC%94%E8%AE%B0/"/>
    <id>http://ihozh.com/2017/06/27/Python-模块化编程-笔记/</id>
    <published>2017-06-27T08:19:20.000Z</published>
    <updated>2017-06-27T09:39:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E6%90%8F%E6%B5%AA/Python%20%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B%20-%20%E7%AC%94%E8%AE%B0/Modular%20Programming%20with%20Python%E5%B0%81%E9%9D%A2.jpg" alt="Modular Programming with Python封面"><br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xrzpr.com1.z0.glb.clouddn.com/%E6%90%8F%E6%B5%AA/Python%20%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B%20-%20%E7%AC%94%E8%AE%B0/Modular%20Programming%20with%20Python%E5%B0%81%E9%9D%A2.jpg&quot; alt=&quot;Modular Programming with Python封面&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="搏浪" scheme="http://ihozh.com/categories/%E6%90%8F%E6%B5%AA/"/>
    
    
      <category term="Python" scheme="http://ihozh.com/tags/Python/"/>
    
      <category term="编程" scheme="http://ihozh.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Matplotlib Backend</title>
    <link href="http://ihozh.com/2017/06/27/Matplotlib-Backend/"/>
    <id>http://ihozh.com/2017/06/27/Matplotlib-Backend/</id>
    <published>2017-06-27T05:50:49.000Z</published>
    <updated>2017-06-28T10:03:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h1><p>A lot of documentation on the website and in the mailing lists refers to the “backend” and many new users are confused by this term. matplotlib targets many different use cases and output formats. Some people use matplotlib interactively from the python shell and have plotting windows pop up when they type commands. Some people embed matplotlib into graphical user interfaces like wxpython or pygtk to build rich applications. Others use matplotlib in batch scripts to generate postscript images from some numerical simulations, and still others in web application servers to dynamically serve up graphs.<br><a id="more"></a><br>To support all of these use cases, matplotlib can target different outputs, and each of these capabilities is called a backend; the “frontend” is the user facing code, i.e., the plotting code, whereas the “backend” does all the hard work behind-the-scenes to make the figure. There are two types of backends: user interface backends (for use in pygtk, wxpython, tkinter, qt4, or macosx; also referred to as “interactive backends”) and hardcopy backends to make image files (PNG, SVG, PDF, PS; also referred to as “non-interactive backends”).</p>
<p>There are four ways to configure your backend. If they conflict each other, the method mentioned last in the following list will be used, e.g. calling use() will override the setting in your <strong>matplotlibrc</strong>.</p>
<ol>
<li><p>The backend parameter in your <strong>matplotlibrc</strong> file (see Customizing matplotlib):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">backend : WXAgg   # use wxpython with antigrain (agg) rendering</div></pre></td></tr></table></figure>
</li>
<li><p>Setting the MPLBACKEND environment variable, either for your current shell or for a single script:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; export MPLBACKEND=&quot;module://my_backend&quot;</div><div class="line">&gt; python simple_plot.py</div><div class="line">&gt; MPLBACKEND=&quot;module://my_backend&quot; python simple_plot.py</div></pre></td></tr></table></figure>
<p>Setting this environment variable will override the backend parameter in any matplotlibrc, even if there is a matplotlibrc in your current working directory. Therefore setting MPLBACKEND globally, e.g. in your .bashrc or .profile, is discouraged as it might lead to counter-intuitive behavior.</p>
</li>
<li><p>To set the backend for a single script, you can alternatively use the -d command line argument:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; python script.py -dbackend</div></pre></td></tr></table></figure>
<p>This method is deprecated as the -d argument might conflict with scripts which parse command line arguments (see issue <a href="https://github.com/matplotlib/matplotlib/issues/1986" target="_blank" rel="external">#1986</a>). You should use MPLBACKEND instead.</p>
</li>
<li>If your script depends on a specific backend you can use the use() function:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import matplotlib</div><div class="line">matplotlib.use(&apos;PS&apos;)   # generate postscript output by default</div></pre></td></tr></table></figure>
</li>
</ol>
<p>If you use the use() function, this must be done before importing matplotlib.pyplot. Calling use() after pyplot has been imported will have no effect. Using use() will require changes in your code if users want to use a different backend. Therefore, you should avoid explicitly calling use() unless absolutely necessary.</p>
<blockquote>
<p><strong>Note</strong><br>Backend name specifications are not case-sensitive; e.g., ‘GTKAgg’ and ‘gtkagg’ are equivalent.</p>
</blockquote>
<p>With a typical installation of matplotlib, such as from a binary installer or a linux distribution package, a good default backend will already be set, allowing both interactive work and plotting from scripts, with output to the screen and/or to a file, so at least initially you will not need to use any of the methods given above.</p>
<p>If, however, you want to write graphical user interfaces, or a web application server (Matplotlib in a web application server), or need a better understanding of what is going on, read on. To make things a little more customizable for graphical user interfaces, matplotlib separates the concept of the renderer (the thing that actually does the drawing) from the canvas (the place where the drawing goes). The canonical renderer for user interfaces is Agg which uses the Anti-Grain Geometry C++ library to make a raster (pixel) image of the figure. All of the user interfaces except macosx can be used with agg rendering, e.g., WXAgg, GTKAgg, QT4Agg, QT5Agg, TkAgg. In addition, some of the user interfaces support other rendering engines. For example, with GTK, you can also select GDK rendering (backend GTK deprecated in 2.0) or Cairo rendering (backend GTKCairo).</p>
<p>For the rendering engines, one can also distinguish between vector or raster renderers. Vector graphics languages issue drawing commands like “draw a line from this point to this point” and hence are scale free, and raster backends generate a pixel representation of the line whose accuracy depends on a DPI setting.</p>
<p>Here is a summary of the matplotlib renderers (there is an eponymous backed for each; these are non-interactive backends, capable of writing to a file):</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Renderer</th>
<th style="text-align:left">Filetypes</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">AGG</td>
<td style="text-align:left">png</td>
<td style="text-align:left">raster graphics – high quality images using the Anti-Grain Geometry engine</td>
</tr>
<tr>
<td style="text-align:left">PS</td>
<td style="text-align:left">ps eps</td>
<td style="text-align:left">vector graphics – Postscript output</td>
</tr>
<tr>
<td style="text-align:left">PDF</td>
<td style="text-align:left">PDF</td>
<td style="text-align:left">vector graphics – Portable Document Format</td>
</tr>
<tr>
<td style="text-align:left">SVG</td>
<td style="text-align:left">svg</td>
<td style="text-align:left">vector graphics – Scalable Vector Graphics</td>
</tr>
<tr>
<td style="text-align:left">Cairo</td>
<td style="text-align:left">png ps pdf svg</td>
<td style="text-align:left">vector graphics – Cairo graphics</td>
</tr>
<tr>
<td style="text-align:left">GDK</td>
<td style="text-align:left">png jpg tiff</td>
<td style="text-align:left">raster graphics – the Gimp Drawing Kit Deprecated in 2.0</td>
</tr>
</tbody>
</table>
</div>
<p>And here are the user interfaces and renderer combinations supported; these are interactive backends, capable of displaying to the screen and of using appropriate renderers from the table above to write to a file:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Backend</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">GTKAgg</td>
<td style="text-align:left">Agg rendering to a GTK 2.x canvas (requires PyGTK and pycairo or cairocffi; Python2 only)</td>
</tr>
<tr>
<td style="text-align:left">GTK3Agg</td>
<td style="text-align:left">Agg rendering to a GTK 3.x canvas (requires PyGObject and pycairo or cairocffi)</td>
</tr>
<tr>
<td style="text-align:left">GTK</td>
<td style="text-align:left">GDK rendering to a GTK 2.x canvas (not recommended and d eprecated in 2.0) (requires PyGTK and pycairo or cairocffi; Python2 only)</td>
</tr>
<tr>
<td style="text-align:left">GTKCairo</td>
<td style="text-align:left">Cairo rendering to a GTK 2.x canvas (requires PyGTK and pycairo or cairocffi; Python2 only)</td>
</tr>
<tr>
<td style="text-align:left">GTK3Cairo</td>
<td style="text-align:left">Cairo rendering to a GTK 3.x canvas (requires PyGObject and pycairo or cairocffi)</td>
</tr>
<tr>
<td style="text-align:left">WXAgg</td>
<td style="text-align:left">Agg rendering to to a wxWidgets canvas (requires wxPython)</td>
</tr>
<tr>
<td style="text-align:left">WX</td>
<td style="text-align:left">Native wxWidgets drawing to a wxWidgets Canvas (not recommended and deprecated in 2.0) (requires wxPython)</td>
</tr>
<tr>
<td style="text-align:left">TkAgg</td>
<td style="text-align:left">Agg rendering to a Tk canvas (requires TkInter)</td>
</tr>
<tr>
<td style="text-align:left">Qt4Agg</td>
<td style="text-align:left">Agg rendering to a Qt4 canvas (requires PyQt4 or pyside)</td>
</tr>
<tr>
<td style="text-align:left">Qt5Agg</td>
<td style="text-align:left">Agg rendering in a Qt5 canvas (requires PyQt5)</td>
</tr>
<tr>
<td style="text-align:left">macosx</td>
<td style="text-align:left">Cocoa rendering in OSX windows (presently lacks blocking show() behavior when matplotlib is in non-interactive mode)</td>
</tr>
</tbody>
</table>
</div>
<h1 id="application"><a href="#application" class="headerlink" title="application"></a>application</h1><h2 id="using-matplotlib-with-pygame"><a href="#using-matplotlib-with-pygame" class="headerlink" title="using matplotlib with pygame"></a>using matplotlib with pygame</h2><p>Matplotlib is an open source library for easy plotting. We can integrate Matplotlib into Pygame game and create various plots.</p>
<p>In order to integrate Matplotlib with Pygame, we need to use a non-interactive backend, otherwise Matplotlib will present us with a GUI window by default. We will import the main Matplotlib module and call the <code>use</code> function. This function has to be called immediately after importing the main <code>matplotlib</code> module and before other <code>matplotlib</code> modules are imported:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import matplotlib</div><div class="line">matplotlib.use(&quot;Agg&quot;)</div></pre></td></tr></table></figure>
<p>notice: non-interactive backend, meaning it won’t display on the screen, only save to files. If we do not change the default backend. Python will give us <code>NSException</code>.   </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;introduction&quot;&gt;&lt;a href=&quot;#introduction&quot; class=&quot;headerlink&quot; title=&quot;introduction&quot;&gt;&lt;/a&gt;introduction&lt;/h1&gt;&lt;p&gt;A lot of documentation on the website and in the mailing lists refers to the “backend” and many new users are confused by this term. matplotlib targets many different use cases and output formats. Some people use matplotlib interactively from the python shell and have plotting windows pop up when they type commands. Some people embed matplotlib into graphical user interfaces like wxpython or pygtk to build rich applications. Others use matplotlib in batch scripts to generate postscript images from some numerical simulations, and still others in web application servers to dynamically serve up graphs.&lt;br&gt;
    
    </summary>
    
      <category term="搏浪" scheme="http://ihozh.com/categories/%E6%90%8F%E6%B5%AA/"/>
    
    
      <category term="Python" scheme="http://ihozh.com/tags/Python/"/>
    
      <category term="Matplotlib" scheme="http://ihozh.com/tags/Matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>Matplotlib 配色方案</title>
    <link href="http://ihozh.com/2017/06/24/Matplotlib%20%E9%85%8D%E8%89%B2%E6%96%B9%E6%A1%88/"/>
    <id>http://ihozh.com/2017/06/24/Matplotlib 配色方案/</id>
    <published>2017-06-24T04:37:47.000Z</published>
    <updated>2017-06-27T05:53:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>在用matplotlib做图的时候，通常需要配色。 matplotlib 自己提供了一套解决配色方案，除此之外还有一个非常小巧的python包 palettable 提供了一系列的专业配色方案。这些对于python画图来说应该是足够了。</p>
<h1 id="Matplotlib-配色方案"><a href="#Matplotlib-配色方案" class="headerlink" title="Matplotlib 配色方案"></a>Matplotlib 配色方案</h1><p><a href="https://matplotlib.org/examples/color/colormaps_reference.html" target="_blank" rel="external">官方网址</a><br><a id="more"></a><br>colormap 分为四种类型：   </p>
<ul>
<li><p>Sequential：在两个色调中近似单色的变化平稳的色图。Sequential colormap 是绘制科学数据理想的配色方案，这种方案内在表现出从低到高的变化。<br><img src="https://matplotlib.org/_images/colormaps_reference_01.png" alt=""></p>
</li>
<li><p>Diverging: 有中间色，由中间色向两段不同的颜色缓慢变化。这种配色方案适合数据有中间值的情况。<br><img src="https://matplotlib.org/_images/colormaps_reference_03.png" alt=""></p>
</li>
<li><p>Qualitative: 离散的颜色，颜色变化较快。<br><img src="https://matplotlib.org/_images/colormaps_reference_04.png" alt="">   </p>
</li>
<li><p>Miscellaneous: 其他不属于以上三种的配色方案。<br><img src="https://matplotlib.org/_images/colormaps_reference_05.png" alt=""></p>
</li>
</ul>
<h1 id="Palettable-配色方案"><a href="#Palettable-配色方案" class="headerlink" title="Palettable 配色方案"></a>Palettable 配色方案</h1><p>完全基于Python的配色库，小巧，没有其他依赖。体格虽小但是能力不小，不仅是matplotlib完美的解决方案还可以为网站应用配色。</p>
<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>Palettable 收录了以下配色库中的配色。</p>
<ul>
<li>cmocean</li>
<li>Colorbrewer2</li>
<li>Cubehelix</li>
<li>matplotlib</li>
<li>MyCarta</li>
<li>Tableau</li>
<li>The Wes Anderson Palettes blog</li>
</ul>
<p>推荐一个在线的可视化配色库<br><a href="http://colorbrewer2.org/" target="_blank" rel="external">colorbrewer2</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Python2 Python3 都支持pip    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install palettable</div></pre></td></tr></table></figure>
<h2 id="寻找颜色"><a href="#寻找颜色" class="headerlink" title="寻找颜色"></a>寻找颜色</h2><p>命名规则 <code>&lt;颜色名&gt;_&lt;颜色数量&gt;</code>，反色加上<code>_r</code>。<br>使用时需要先导入包：</p>
<p><a href="https://jiffyclub.github.io/palettable/cmocean/diverging/" target="_blank" rel="external">palettable.cmocean.diverging</a><br><a href="https://jiffyclub.github.io/palettable/cmocean/sequential/" target="_blank" rel="external">palettable.cmocean.sequential</a><br><a href="https://jiffyclub.github.io/palettable/colorbrewer/diverging/" target="_blank" rel="external">palettable.colorbrewer.diverging</a><br><a href="https://jiffyclub.github.io/palettable/colorbrewer/qualitative/" target="_blank" rel="external">palettable.colorbrewer.qualitative</a><br><a href="https://jiffyclub.github.io/palettable/colorbrewer/sequential/" target="_blank" rel="external">palettable.colorbrewer.sequential</a><br><a href="https://jiffyclub.github.io/palettable/matplotlib/" target="_blank" rel="external">palettable.matplotlib</a><br><a href="https://jiffyclub.github.io/palettable/mycarta/" target="_blank" rel="external">palettable.mycarta</a><br><a href="https://jiffyclub.github.io/palettable/tableau/" target="_blank" rel="external">palettable.tableau</a><br><a href="https://jiffyclub.github.io/palettable/wesanderson/" target="_blank" rel="external">palettable.wesanderson</a></p>
<p>如果要使用 Dark2_7 配色方案<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">from palettable.colorbrewer.qualitative import Dark2_7</div></pre></td></tr></table></figure></p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="通用接口"><a href="#通用接口" class="headerlink" title="通用接口"></a>通用接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">name</div><div class="line">    The name of the palette.</div><div class="line">type</div><div class="line">    One of &apos;diverging&apos;, &apos;qualitative&apos;, or &apos;sequential&apos;.</div><div class="line">number</div><div class="line">    The number of defined colors in the palette.</div><div class="line">colors</div><div class="line">    The defined colors in the palette as a list of RGB tuples in the range 0-255.</div><div class="line">hex_colors</div><div class="line">    Colors as a list of hex strings (e.g. &apos;#A912F4&apos;).</div><div class="line">mpl_colors</div><div class="line">    Colors as a list of RGB tuples in the range 0-1 as used by matplotlib.</div><div class="line">mpl_colormap</div><div class="line">    A continuous, interpolated matplotlib LinearSegmentedColormap.</div></pre></td></tr></table></figure>
<h3 id="Palette-接口"><a href="#Palette-接口" class="headerlink" title="Palette 接口"></a>Palette 接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">get_mpl_colormap</div><div class="line">    Use this method to get a matplotlib color map and pass custom keyword arguments to LinearSegmentedColormap.from_list.</div><div class="line">show_as_blocks</div><div class="line">    Show the defined colors of the palette in the IPython Notebook. Requires ipythonblocks to be installed.</div><div class="line">show_discrete_image</div><div class="line">    Show the defined colors of the palette in the IPython Notebook. Requires Matplotlib Palettes to be installed.</div><div class="line">show_continuous_image</div><div class="line">    Show the continuous, interpolated palette in the IPython Notebook. Requires Matplotlib Palettes to be installed.</div><div class="line">save_discrete_image</div><div class="line">    Save an image of the defined colors of palette to a file. Requires Matplotlib Palettes to be installed.</div><div class="line">save_continuous_image</div><div class="line">    Save an image of the continuous, interpolated palette to a file. Requires Matplotlib Palettes to be installed.</div></pre></td></tr></table></figure>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>三种常见使用方法   </p>
<h3 id="Color-Cycle"><a href="#Color-Cycle" class="headerlink" title="Color Cycle"></a>Color Cycle</h3><p>改变matplotlib的默认颜色循环。使用 <code>.mpl_color</code> 属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ax.set_color_cycle(palettable.colorbrewer.qualitative.Dark2_8.mpl_colors)</div></pre></td></tr></table></figure></p>
<h3 id="Colormap"><a href="#Colormap" class="headerlink" title="Colormap"></a>Colormap</h3><p>给cmap传参，使用 <code>.mpl_color</code> 属性。：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ax.imshow(data, cmap=Blues_8.mpl_colormap)</div><div class="line"> #or</div><div class="line">ax.plot(data, cmap=Blues_8.mpl_colormap)</div></pre></td></tr></table></figure></p>
<h3 id="Discrete-Colormap"><a href="#Discrete-Colormap" class="headerlink" title="Discrete Colormap"></a>Discrete Colormap</h3><p><code>.mpl_colormap</code>属性是连续的，使用 <code>ListedColormap</code> 离散化。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cmap = ListedColormap(palettable.colorbrewer.qualitative.Dark2_7.mpl_colors)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在用matplotlib做图的时候，通常需要配色。 matplotlib 自己提供了一套解决配色方案，除此之外还有一个非常小巧的python包 palettable 提供了一系列的专业配色方案。这些对于python画图来说应该是足够了。&lt;/p&gt;
&lt;h1 id=&quot;Matplotlib-配色方案&quot;&gt;&lt;a href=&quot;#Matplotlib-配色方案&quot; class=&quot;headerlink&quot; title=&quot;Matplotlib 配色方案&quot;&gt;&lt;/a&gt;Matplotlib 配色方案&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://matplotlib.org/examples/color/colormaps_reference.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方网址&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="搏浪" scheme="http://ihozh.com/categories/%E6%90%8F%E6%B5%AA/"/>
    
    
      <category term="Python" scheme="http://ihozh.com/tags/Python/"/>
    
      <category term="Matplotlib" scheme="http://ihozh.com/tags/Matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>MIT多元微积分四：三重积分和曲面积分</title>
    <link href="http://ihozh.com/2017/06/23/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E5%9B%9B%EF%BC%9A%E4%B8%89%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/"/>
    <id>http://ihozh.com/2017/06/23/MIT多元微积分四：三重积分和曲面积分/</id>
    <published>2017-06-24T03:37:01.000Z</published>
    <updated>2017-06-24T04:22:07.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="苦境" scheme="http://ihozh.com/categories/%E8%8B%A6%E5%A2%83/"/>
    
    
      <category term="微积分" scheme="http://ihozh.com/tags/%E5%BE%AE%E7%A7%AF%E5%88%86/"/>
    
      <category term="公开课" scheme="http://ihozh.com/tags/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
      <category term="18.02" scheme="http://ihozh.com/tags/18-02/"/>
    
      <category term="工程数学" scheme="http://ihozh.com/tags/%E5%B7%A5%E7%A8%8B%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>MIT多元微积分三：二重积分和线积分</title>
    <link href="http://ihozh.com/2017/06/19/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/"/>
    <id>http://ihozh.com/2017/06/19/MIT多元微积分三：二重积分和线积分/</id>
    <published>2017-06-19T20:43:14.000Z</published>
    <updated>2017-09-08T06:43:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Double-Integrals-二重积分"><a href="#1-Double-Integrals-二重积分" class="headerlink" title="1. Double Integrals 二重积分"></a>1. Double Integrals 二重积分</h1><p>回顾单变量积分，积分可以看成函数与坐标轴所围成的面积。<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/integral.png" alt=""></p>
<a id="more"></a>
<h2 id="1-1-Definition-of-Double-Integration-二重积分定义"><a href="#1-1-Definition-of-Double-Integration-二重积分定义" class="headerlink" title="1.1 Definition of Double Integration 二重积分定义"></a>1.1 Definition of Double Integration 二重积分定义</h2><p>二重积分可以理解成二元函数下围城的体积。对区域R做积分，R为积分域，dA表示的是一小块面积。</p>
<script type="math/tex; mode=display">\iint_{R} f(x,y)\mathrm{d} A</script><p>将区域R分成多个小块，对每块面积取极限</p>
<script type="math/tex; mode=display">\sum _ i f(x_i,y_i)\cdot \Delta A_i,\Delta A_i \rightarrow 0</script><p>这就是二重积分的定义。</p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/doubleIntegral.gif" alt=""></p>
<p>但是，对体积取极限不是计算积分的常用算法。这样来考虑阴影部分体积，用一些平行的平面扫过定义域，在每个切面上，就会出现但变量积分所表示的面积。当把所有这些面积加起来时（积分），就得到了阴影部分的体积。</p>
<p>定义 S(x) 为平行于yz面的切面，切面的厚度取极限为dx  </p>
<script type="math/tex; mode=display">\iint_{R} f(x,y)\mathrm{d} A =
\int_{x_\min}^{x_\max}S(x)\mathrm{d}x</script><p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/interate%20integral1.gif" alt=""></p>
<p>下一步，计算每个切面的S(x)，这是一个一次积分，x是定值，指的是某一个切面。y的积分域随x变化</p>
<script type="math/tex; mode=display">S(x)=\int_{y_{\min(x)}}^{y_{\max(x)}} f(x,y)\mathrm{d}y</script><p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/interate%20integral2.gif" alt=""></p>
<p>将两个积分结合到一起，就是一个非常重要的概念，<strong>累次积分</strong>(interated integral)：   </p>
<script type="math/tex; mode=display">\iint_{R} f(x,y)\mathrm{d} A =
\int_{x_\min}^{x_\max}
\left [\int_{y_{\min(x)}}^{y_{\max(x)}}  f(x,y)\mathrm{d}y \right ]\mathrm{d}x</script><p>计算累次积分就是分别对变量进行一次积分。</p>
<h2 id="1-2-Examples-of-Double-Integration-二重积分例子"><a href="#1-2-Examples-of-Double-Integration-二重积分例子" class="headerlink" title="1.2 Examples of Double Integration 二重积分例子"></a>1.2 Examples of Double Integration 二重积分例子</h2><p><strong>例1</strong>   </p>
<p>计算以下函数的积分,x，y的区间都为[0,1]：</p>
<script type="math/tex; mode=display">z=1-x^2-y^2</script><p>这是最简单的情况，x和y的取值互相独立。积分域为矩形，阴影部分体积为所求积分。注意一部分在xy平面上方，为正，一部分为在xy平面下方，为负。    </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/%E7%A7%AF%E5%88%86%E5%9F%9F%E4%B8%BA%E6%96%B9.png" alt="">   </p>
<script type="math/tex; mode=display">\int_{0}^{1}
\int_{0}^{1} (1-x^2-y^2) \mathrm{d}y\mathrm{d}x</script><p>首先计算内积分：</p>
<script type="math/tex; mode=display">\int_{0}^{1} (1-x^2-y^2) \mathrm{d}y=
\left [ y^2-x^2y-\frac{1}{3}y^3\right ]_ 0^1=
\frac{2}{3}-x^2</script><p>其次计算外积分：</p>
<script type="math/tex; mode=display">\int_{0}^{1} (\frac{2}{3}-x^2) \mathrm{d}x=
\left [ \frac{2}{3}x-\frac{1}{3}x^3 \right ]_ 0^1=
\frac{1}{3}</script><p><strong>例2</strong><br>计算以下函数的积分, 积分域为x,y&gt;0，并且图像大于xy平面的部分</p>
<script type="math/tex; mode=display">z=1-x^2-y^2</script><p>y的取值依赖于x，此时的积分域为四分之一个圆。   </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/%E7%A7%AF%E5%88%86%E5%9F%9F%E4%B8%BA%E5%9C%86.png" alt="">  </p>
<script type="math/tex; mode=display">\iint_{R} (1-x^2-y^2) \mathrm{d}A=
\int_{0}^{1}
\int_{0}^{\sqrt{1-x^2}} (1-x^2-y^2) \mathrm{d}y\mathrm{d}x</script><p>内积分：</p>
<script type="math/tex; mode=display">\int_{0}^{\sqrt{1-x^2}} (1-x^2-y^2) \mathrm{d}y=
\left [ y^2-x^2y-\frac{1}{3}y^3\right ]_ 0^{\sqrt{1-x^2}}=
\frac{2}{3}(1-x^2)^{\frac{2}{3}}</script><p>外积分(用到三角变换，在极坐标下更好计算)：</p>
<script type="math/tex; mode=display">\int_{0}^{1} \frac{2}{3}(1-x^2)^{\frac{2}{3}} \mathrm{d}x=
\frac{\pi}{8}</script><h2 id="1-3-Exchanging-the-Order-of-Integration-交换积分次序"><a href="#1-3-Exchanging-the-Order-of-Integration-交换积分次序" class="headerlink" title="1.3 Exchanging the Order of Integration 交换积分次序"></a>1.3 Exchanging the Order of Integration 交换积分次序</h2><p>几何学上，交换积分次序是有意义的，从不同的方向对积分域做切面。</p>
<script type="math/tex; mode=display">\int_{0}^{1}\int_{0}^{2} \mathrm{d}y\mathrm{d}x</script><p>交换积分次序也可能会让计算变得简单。改变积分次序，要考虑取值范围。    </p>
<script type="math/tex; mode=display">\int_{0}^{1}\int_{x}^{\sqrt{x}} \frac{e^y}{y}\mathrm{d}y\mathrm{d}x</script><p>积分域：<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/%E4%BA%A4%E6%8D%A2%E7%A7%AF%E5%88%86%E7%A7%AF%E5%88%86%E5%9F%9F.png" alt="">  </p>
<script type="math/tex; mode=display">\int_{0}^{1}\int_{y^2}^{y} \frac{e^y}{y}\mathrm{d}x\mathrm{d}y</script><p>内积分：</p>
<script type="math/tex; mode=display">\int_{y^2}^{y} \frac{e^y}{y}\mathrm{d}x=
\left [ \frac{e^y}{y}x\right ]_ {y^2}^{y}=
e^y-e^yy</script><p>外积分(不定积分)：</p>
<script type="math/tex; mode=display">\int_{0}^{1} (e^y-e^yy) \mathrm{d}y=
e-2</script><h2 id="1-4-Double-Integrals-in-Polar-Coordinates-极坐标的二重积分"><a href="#1-4-Double-Integrals-in-Polar-Coordinates-极坐标的二重积分" class="headerlink" title="1.4 Double Integrals in Polar Coordinates 极坐标的二重积分"></a>1.4 Double Integrals in Polar Coordinates 极坐标的二重积分</h2><p>考虑之前的例子：</p>
<script type="math/tex; mode=display">\iint_{
  \begin{matrix}
  x^2+y^2\leq 1\\
  x,y\geq 0
  \end{matrix}
} (1-x^2-y^2) \mathrm{d}A</script><p>在直角坐标系下，算这个积分并不容易。用极坐标代替直角坐标。</p>
<p>极坐标下，二元函数的几何意义是相同的，即函数与定义域围成的体积。   </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/doubleIntegralPolar.gif" alt="doubleIntegralPolar.gif"></p>
<p>将定义域直角坐标系的x和y分别替换成对应极坐标系的 $r$ 和 $\theta$，同理，定义域可以细分为无数的小块，先来计算每个小区域的面积。</p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/polarInegral.png" alt="polarInetegral.png"></p>
<script type="math/tex; mode=display">\Delta A \approx r\Delta\theta\Delta r</script><p>注意不是：</p>
<script type="math/tex; mode=display">\neq \Delta\theta\Delta r</script><p>当面积足够小时；</p>
<script type="math/tex; mode=display">\mathrm{d} A =r\mathrm{d}\theta\mathrm{d} r</script><p>再来看看被积分的函数：</p>
<script type="math/tex; mode=display">f(x,y)=1-x^2-y^2</script><p>由于有直角坐标系和极坐标系的转换公式：</p>
<script type="math/tex; mode=display">\left\{\begin{matrix}
x=r\cos\theta \\
y=r\sin\theta
\end{matrix}\right.</script><script type="math/tex; mode=display">f(r,\theta)=1-r^2</script><p>得到最后极坐标下的积分公式：</p>
<script type="math/tex; mode=display">\int_{0}^{\frac{\pi}{2}}\int_{0}^{1} (1-r^2)r\mathrm{d}r\mathrm{d}\theta</script><p>内积分：</p>
<script type="math/tex; mode=display">\int_{0}^{1} r-r^3\mathrm{d}x=
\left [ \frac{1}{2}r^2=\frac{1}{4}r^4\right ]_ {0}^{1}=\frac{1}{4}</script><p>外积分：</p>
<script type="math/tex; mode=display">\int_{0}^{\frac{\pi}{2}} \frac{1}{4} \mathrm{d}\theta=\frac{\pi}{8}</script><p>这个例子是幸运的，当从直角坐标系变换的极坐标的时候</p>
<ul>
<li>积分区域更加简单</li>
<li>积分对象更加简单</li>
</ul>
<p>但是一般来说，这种转换总会有牺牲的。   </p>
<ul>
<li>积分区域不确定，大部分情况下，首先给定角度，对r做积分</li>
<li>积分对象变复杂，因为引入了三角函数</li>
</ul>
<h2 id="1-5-Applications-Mass-and-Average-Value-应用：质量和平均体积"><a href="#1-5-Applications-Mass-and-Average-Value-应用：质量和平均体积" class="headerlink" title="1.5 Applications: Mass and Average Value 应用：质量和平均体积"></a>1.5 Applications: Mass and Average Value 应用：质量和平均体积</h2><p>跳出二重积分的几何意义是求体积的观念，现在看下更广泛的应用</p>
<h3 id="计算某区域的面积"><a href="#计算某区域的面积" class="headerlink" title="计算某区域的面积"></a>计算某区域的面积</h3><p>一说计算面积，很容易就让人联想到，这是一重积分的工作，但是二重积分也是可以算面积的。面积可以看作是对小区域 $\mathrm{d}A$ 求和：</p>
<script type="math/tex; mode=display">Area(R)=\iint_{R}1 \cdot \mathrm{d}A</script><h3 id="计算平面物体的质量"><a href="#计算平面物体的质量" class="headerlink" title="计算平面物体的质量"></a>计算平面物体的质量</h3><p>我们都知道，</p>
<script type="math/tex; mode=display">质量=密度\times体积</script><p>可以对密度做积分得到质量，但这是三重积分的工作。注意二重积分只能处理平面。</p>
<p>但是考虑一个平面物体，比如金属板，就可以用二重积分计算了。平面金属板的质量是板上每一小片质量的总和。一个平面物体的密度是每单位面积元的质量，因此可以对密度积分求平面物体质量。<br>使用 $\delta$ 表示密度</p>
<script type="math/tex; mode=display">\Delta m \approx \delta \Delta A</script><script type="math/tex; mode=display">\mathrm{Mass} = \iint_{R} \delta \cdot \mathrm{d} A</script><h3 id="在区域R上求函数f的平均值"><a href="#在区域R上求函数f的平均值" class="headerlink" title="在区域R上求函数f的平均值"></a>在区域R上求函数f的平均值</h3><p>大家都知道有限数据集平均的意义，比如一个班的考试平均成绩。但是无限数据集呢？</p>
<p>测量一个空间的平均温度，更高的准确度要求更多的测量点。<strong>数学上定义连续数据集合的平均值的方法是对整个数据集合的函数做积分，再除以这个集合的大小，也就是区域的面积。</strong></p>
<script type="math/tex; mode=display">\mathrm{Average} (f)=\overline{f}=\frac{1}{\mathrm{Area(R)}}\iint_R f \cdot\mathrm{d}A</script><p>这个平均值对各点的权重是一样的。如果是加权平均则在积分内乘以权重系数。</p>
<script type="math/tex; mode=display">\mathrm{Average} (f)=\overline{f}=\frac{1}{\mathrm{Area(R)}}\iint_R f \delta\cdot\mathrm{d}A</script><h3 id="平面物体的质心"><a href="#平面物体的质心" class="headerlink" title="平面物体的质心"></a>平面物体的质心</h3><p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/centerMass.gif" alt="centerMass.gif"><br>在直角坐标系下，物体的质心在(x,y)的加权平均处。</p>
<script type="math/tex; mode=display">\overline{x}=\frac{1}{\mathrm{Mass}}\iint x \delta \cdot\mathrm{d}A</script><script type="math/tex; mode=display">\overline{y}=\frac{1}{\mathrm{Mass}}\iint y \delta \cdot\mathrm{d}A</script><h2 id="1-6-Applications-Moment-of-Inertia-应用：转动惯量"><a href="#1-6-Applications-Moment-of-Inertia-应用：转动惯量" class="headerlink" title="1.6 Applications: Moment of Inertia 应用：转动惯量"></a>1.6 Applications: Moment of Inertia 应用：转动惯量</h2><p>质量是使物体平动的困难程度。<br>转动惯量用来描述刚体转动时的惯性，和质量不同，和旋转轴有关。</p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/Moment%20of%20Inertia.png" alt="Moment of Inertia"></p>
<p>质点的动能：</p>
<script type="math/tex; mode=display">\frac{1}{2}mv^2</script><p>距离质点o的r处有一点m，角速度为w：</p>
<script type="math/tex; mode=display">\frac{1}{2}mv^2=\frac{1}{2}mr^2\omega^2</script><p>所以，转动惯量的定义为：</p>
<script type="math/tex; mode=display">mr^2</script><p>一个大物体的转动惯量是所有小物体的转动惯量总和。</p>
<script type="math/tex; mode=display">\Delta m \approx \delta \Delta A</script><script type="math/tex; mode=display">\Delta m r^2\approx r^2\delta \Delta A</script><p>关于原点的转动惯量</p>
<script type="math/tex; mode=display">I_o=\iint_R (x^2+y^2)\delta \cdot\mathrm{d}A</script><script type="math/tex; mode=display">转动动能=\frac{1}{2}I_o\omega^2</script><p>如果沿着x轴转动，质点到x轴的距离为|y|，表示了沿着x轴转动的难度。</p>
<script type="math/tex; mode=display">I_x=\iint_R y^2\delta \cdot\mathrm{d}A</script><p>同理，我们可以求出刚体绕任意轴转动的公式，只要能够找到每个点到转轴的距离。</p>
<p><strong>例子：</strong><br>一张正在播放的碟片，设密度均匀为1</p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/flatdisc.png" alt="flatdisc.png"></p>
<script type="math/tex; mode=display">I_o=\iint_R r^2 r\cdot\mathrm{d}r\mathrm{d}\theta\\
=\int_0^{2\pi}\int_0^a r^3\cdot\mathrm{d}r\mathrm{d}\theta\\
=\frac{\pi a^4}{2}</script><p>这就是沿着中心点转动碟片的难度，再来看下飞盘，飞盘沿边界处一点转动<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/%E9%A3%9E%E7%9B%98.png" alt="飞盘"></p>
<script type="math/tex; mode=display">I_o=\iint_R r^2 r\cdot\mathrm{d}r\mathrm{d}\theta\\
=\int_{2\pi}^{2\pi}\int_0^{2a\cos{\theta}} r^3\cdot\mathrm{d}r\mathrm{d}\theta\\
=\frac{3}{2}\pi a^4</script><p>如果飞盘绕着边界一点旋转会比绕中心旋转难3倍。</p>
<h2 id="1-7-Change-of-Variables-变量转化"><a href="#1-7-Change-of-Variables-变量转化" class="headerlink" title="1.7 Change of Variables 变量转化"></a>1.7 Change of Variables 变量转化</h2><p>知道如何在直角坐标系中处理二重积分，也知道直角坐标系和极坐标系的互相转换，一般情况下，变量变换更加普遍。这一节讲如何在二重积分下做变量变换。</p>
<h3 id="计算椭圆的面积"><a href="#计算椭圆的面积" class="headerlink" title="计算椭圆的面积"></a>计算椭圆的面积</h3><p><strong>例1：</strong> 计算一个以a，b为半轴的椭圆面积。</p>
<script type="math/tex; mode=display">\left(\frac{x}{a}\right)^2+\left(\frac{y}{b}\right)^2=1</script><p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/ellipsoid.png" alt="ellipsoid.png"></p>
<p>可以在直角坐标系下求面积，但是我们发现并不容易。椭圆是一个被压扁的的圆，直接使用极坐标也不方便。所以首先，要简化：</p>
<script type="math/tex; mode=display">\frac{x}{a}=u</script><script type="math/tex; mode=display">\frac{y}{b}=v</script><script type="math/tex; mode=display">\iint_{\left(\frac{x}{a}\right)^2+\left(\frac{y}{b}\right)^2<1} \mathrm{d}x\mathrm{d}y
=\iint_{u^2+v^2<1} ab\mathrm{d}u\mathrm{d}v\\
=ab\iint_{u^2+v^2<1} \mathrm{d}u\mathrm{d}v
=ab\cdot 单位圆面积=ab\pi</script><p>椭圆的参数变换后，是一个单位圆，这样椭圆的面积就好算了。</p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/ellipsToCircle.gif" alt="ellipsToCircle.gif"></p>
<p>用变量替换的方法会使问题变得简单。<br>如果问题进一步复杂，就要使用更普遍的方法。关键问题是：比例因子（scaling factor）是什么？dxdy和dudv之间的关系是什么？</p>
<h3 id="线性变换"><a href="#线性变换" class="headerlink" title="线性变换"></a>线性变换</h3><p><strong>例2:</strong> 定义：</p>
<script type="math/tex; mode=display">u=x+2y</script><script type="math/tex; mode=display">v=x-y</script><p>这样做的目的，不是简化积分就是简化积分限。（simplify the integrant or the bounds）<br>单位面积：</p>
<script type="math/tex; mode=display">\mathrm{d}A=\mathrm{d}x\mathrm{d}y</script><script type="math/tex; mode=display">\mathrm{d}A'=\mathrm{d}u\mathrm{d}v</script><p>要明确的是，这种线性变换将所有的直线进行相同的变换，而且可以找到一个常比例因子（constant scaling factor）.变换的四边形并不会因为位置的改变而改变。<br>定义比例因子：不受位置选择的影响。因为这是对变量的线性变换。</p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/rangeChange.gif" alt="rangeChange.gif">  </p>
<p>平行四边形的面积可以通过行列式来求：</p>
<script type="math/tex; mode=display">A'
=\begin{vmatrix}
2 & 4\\
2 & -2
\end{vmatrix}=-12</script><p>负号仅仅表示方向相反。<br>所以</p>
<script type="math/tex; mode=display">\mathrm{d}A'=|-3|\mathrm{d}A</script><script type="math/tex; mode=display">\mathrm{d}u\mathrm{d}v=|-3|\mathrm{d}x\mathrm{d}y</script><script type="math/tex; mode=display">\iint\dots\mathrm{d}x\mathrm{d}y
=\iint\dots |-\frac{1}{3}|\mathrm{d}u\mathrm{d}v</script><p>面积变为原来的三倍，方向相反了。</p>
<p>还有件事情要注意就是积分限也跟着变化了。</p>
<h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p><strong>通常情况：</strong>   </p>
<script type="math/tex; mode=display">\left\{\begin{matrix}
u=u(x,y) &\Delta u \approx u_x\Delta x+u_y\Delta y\\
v=v(x,y) &\Delta v \approx v_x\Delta x+v_y\Delta y
\end{matrix}\right.</script><p>使用矩阵表达：</p>
<script type="math/tex; mode=display">\begin{bmatrix}
\Delta u\\
\Delta v
\end{bmatrix}=
\begin{bmatrix}
u_x & u_y\\
v_x & v_y
\end{bmatrix}
\begin{bmatrix}
\Delta x\\
\Delta y
\end{bmatrix}</script><p>当进行线性变换的时候，变换矩阵的行列式代表缩放面积系数。（可以带入验证）</p>
<p><strong>变量替换的雅可比矩阵（Jocabian）表示</strong></p>
<script type="math/tex; mode=display">J=\frac{\partial (u,v)}{\partial (x,y)}
=\begin{bmatrix}
u_x & u_y\\
v_x & v_y
\end{bmatrix}</script><script type="math/tex; mode=display">\mathrm{d}u \mathrm{d}v=|J|\mathrm{d}x\mathrm{d}y</script><p>注意这里没有真的在求偏导数，只是表示dudv和dxdy之间有比例关系的表达方式。</p>
<h3 id="例子：极坐标"><a href="#例子：极坐标" class="headerlink" title="例子：极坐标"></a>例子：极坐标</h3><p>回顾直角坐标系到极坐标系的变化就是将 $\mathrm{d}x\mathrm{d}y$ 变化为$r\mathrm{d}r\mathrm{d}\theta$。现在用新的知识来解释下到极坐标的变换。   </p>
<p>已知变换公式为：   </p>
<script type="math/tex; mode=display">\left\{\begin{matrix}
x=r\cos\theta \\
y=r\sin\theta
\end{matrix}\right.</script><p>极坐标变换的雅可比矩阵的行列式为：</p>
<script type="math/tex; mode=display">\left|\frac{\partial (x,y)}{\partial (r,\theta)}\right|
=\begin{vmatrix}
x_r & x_\theta\\
y_r & y_\theta
\end{vmatrix}
=\begin{vmatrix}
\cos{\theta} & -r\sin{\theta}\\
\sin{\theta} & r\cos{\theta}
\end{vmatrix}=r</script><p>所以：</p>
<script type="math/tex; mode=display">\mathrm{d}x\mathrm{d}y=|r|\mathrm{d}r\mathrm{d}\theta=r\mathrm{d}r\mathrm{d}\theta</script><p>补充：<br>如果计算从xy到uv的雅可比变换矩阵，这个矩阵和uv到xy的变换矩阵互为倒数。</p>
<script type="math/tex; mode=display">\frac{\partial (x,y)}{\partial (u,v)}\cdot\frac{\partial (u,v)}{\partial (x,y)}=1</script><h3 id="一个完整的例子："><a href="#一个完整的例子：" class="headerlink" title="一个完整的例子："></a>一个完整的例子：</h3><script type="math/tex; mode=display">\int_{0}^{1}\int_{0}^{1}x^2y\mathrm{d}x\mathrm{d}y</script><p>不通过变量变换，这是一道很简单的题目。现在强行进行一组变量变换。   </p>
<script type="math/tex; mode=display">u=x</script><script type="math/tex; mode=display">v=xy</script><p>第一步：找到单位面积元<br>通过雅可比，</p>
<script type="math/tex; mode=display">\frac{\partial (u,v)}{\partial (x,y)}
=\begin{vmatrix}
1 & 0\\
y & x
\end{vmatrix}=x</script><script type="math/tex; mode=display">\mathrm{d}u\mathrm{d}v=x\mathrm{d}x\mathrm{d}y</script><p>第二步：得到被积函数    </p>
<script type="math/tex; mode=display">x^2y\mathrm{d}x\mathrm{d}y=v\mathrm{d}u\mathrm{d}v</script><p>第三步：确定积分区间<br>这一步是最难的，这里给两种思考方案：<br>方案一：在xy域上找区间     </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/%E5%8F%98%E9%87%8F%E5%8F%98%E5%8C%96%E5%8C%BA%E9%97%B4%E4%B8%80.png" alt="变量变化区间一"></p>
<p>先看内积分的取值范围，即u的取值范围，先将v看做定值。黄线是v取不同值时的函数轨迹，我们关心的是这些黄线在什么时候进入XY的区域，什么时候离开，这就是u的积分空间。很明显，在y=1时，有u=v，在x=1时，有u=1。得到u的积分区间为[v,1]。</p>
<p>在看外积分的取值范围，xy最小值为0，最大值在XY区间的右上角，为1。所以v的积分区间为[0,1].</p>
<p>方案二： 在uv域上找区间<br>把xy域上的所有边界都变化到uv上</p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/%E5%8F%98%E9%87%8F%E5%8F%98%E5%8C%96%E5%8C%BA%E9%97%B4%E4%BA%8C.png" alt="变量变化区间二"></p>
<p>最后得到变换变量后的积分：   </p>
<script type="math/tex; mode=display">\int_0^{1}\int_v^{1}v\mathrm{d}u\mathrm{d}v</script><h1 id="2-Vector-Fields-and-Line-Integrals-向量场和线积分"><a href="#2-Vector-Fields-and-Line-Integrals-向量场和线积分" class="headerlink" title="2. Vector Fields and Line Integrals 向量场和线积分"></a>2. Vector Fields and Line Integrals 向量场和线积分</h1><h2 id="2-1-Vector-Fields-向量场"><a href="#2-1-Vector-Fields-向量场" class="headerlink" title="2.1 Vector Fields 向量场"></a>2.1 Vector Fields 向量场</h2><p>向量场就是向量构成的一种形式。分量M和N是位置x，y的函数。   </p>
<script type="math/tex; mode=display">\vec{F}=M\hat{i}+n\hat{j}</script><p>这说明平面上的每个点都对应一个向量。向量场的例子也很普遍，比如说这是一张风向图，向量场存在于每一点处。而向量都依赖于点的位置：<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/wind_vector.jpg" alt="wind_vector"></p>
<p>还有一个更加直觉的例子就是地球的重力场，无论在哪里放置一个物体，这个物体都会受到向下的重力。</p>
<p>现在要从数学的角度去理解向量场，所以可以不用关心这些向量具体是什么。   </p>
<p>要研究向量场，首先要知道怎么画出这些向量。   </p>
<script type="math/tex; mode=display">\vec{F}=2\hat{i}+\hat{j}</script><p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/vector1.png" alt="vector1"></p>
<p>注意可能会混淆的地方，向量坐标和位置坐标是不同的，在这个例子中不同的位置有同样的向量。</p>
<script type="math/tex; mode=display">\vec{F}=x\hat{i}</script><p>j分量为0，只有i分量，向量场是水平的。关键是要知道这些向量的长度是多少。长度取决于x：</p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/vector2.png" alt="vector2"></p>
<script type="math/tex; mode=display">\vec{F}=x\hat{i}+y\hat{j}</script><p>这个向量场是从原点放射状的向量，随着距离原点的距离增大而增大。<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/vector3.png" alt="vector3"></p>
<script type="math/tex; mode=display">\vec{F}=-y\hat{i}+x\hat{j}</script><p>在每个点(x,y)处的向量是(-y,x)，相当于位置向量逆时针旋转90度。离远点越远，向量越大。这与流体运动时，绕着某点匀速转动时形成的向量场一致。这就是匀速转动的速度场，并且各点绕原点一圈的时间是2pi。<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/vector4.png" alt="vector4"></p>
<p>知道向量场后有很多东西可以学习，现在从力对物体做得功为突破口来深入了解下向量场。</p>
<h2 id="2-2-Work-and-Line-Integrals-功和线积分"><a href="#2-2-Work-and-Line-Integrals-功和线积分" class="headerlink" title="2.2 Work and Line Integrals 功和线积分"></a>2.2 Work and Line Integrals 功和线积分</h2><p>考虑某个位置上有一个力，如果某个质点受到外力的作用，质点的运动就会形成轨迹。外力所做的功就等于外力与位移向量的点积。但是，如果质点的运动轨迹非常复杂或者外力不是恒力，这时就需要做积分了。这就是线积分。</p>
<script type="math/tex; mode=display">W=(force)\cdot (distance)=\vec{F}\cdot\Delta\vec{r}</script><p>$\Delta \vec{r}$ 表示的是位移，是位置向量的改变量。</p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/work%20vector%20field.png" alt="work vector field"></p>
<p>功的计算是将移动路径分成许多小段，每一小段都有一个与之对应的向量，并求出每个向量与对应外力的点积，在把所有点积加起来。</p>
<p>沿着某条轨迹C，外力所做的功等于其积分。表示为：沿着轨迹C，F与dr的点积的积分：</p>
<script type="math/tex; mode=display">W=\int_C \vec{F}\cdot\mathrm{d}\vec{r}</script><p>可以这样去想，这是一个极限，我们把轨迹切割成非常小的线段，求出所有给定点的点积之和：</p>
<script type="math/tex; mode=display">\lim_{\Delta\vec{r}\to 0}\sum\vec{F}\cdot\Delta\vec{r}
 =\lim_{\Delta t\to 0} \sum\vec{F}\cdot\frac{\Delta\vec{r}}{\Delta t}\Delta t</script><script type="math/tex; mode=display">\frac{\Delta\vec{r}}{\Delta t}=\frac{\mathrm{d}\vec{r}}{\mathrm{d}t}</script><p>所以原式：</p>
<script type="math/tex; mode=display">W=\int_{t_1}^{t_2} \vec{F}\cdot\frac{\mathrm{d}\vec{r}}{\mathrm{d}t}\mathrm{d}t</script><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><script type="math/tex; mode=display">\vec{F}=-y\hat{i}+x\hat{j}</script><script type="math/tex; mode=display">c:\\
x=t\\
y=t^2\\
0\leq t\leq 1</script><p>这个向量场让所有的点绕原点旋转。   </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/lineIntegral.gif" alt="lineIntegral"></p>
<script type="math/tex; mode=display">\int_C \vec{F}\cdot\mathrm{d}\vec{r}
=\int_{0}^{1} \vec{F}\cdot\frac{\mathrm{d}\vec{r}}{\mathrm{d}t}\mathrm{d}t
=\int_{0}^{1}<-t^2,t>\cdot <1,2t>\mathrm{d}t\\
=\int_{0}^{1}t^2\mathrm{d}t=\frac{1}{3}</script><p>几点思考：   </p>
<p>为什么不直接使用dr？<br>因为dr不是常规变量，很难处理，这里只把它当作符号就好了。r不是标量，而是位置向量，所以不能求F对于r对积分，因为无法对向量求积分。   </p>
<p>如果质点从A到B沿着其他路径，力做功是否相同？<br>肯定是不相同的，假设在x轴上有一点c，从原点到c力是不做功的，从c到b明显力做功和原点到b所做功不同。考虑线积分的定义，线积分的值，取决于从a到b的路径。这就是为什么要使用曲线的参数方程。外力做功与路径有关。</p>
<p>如果外力作用导致的质点轨迹改变，力做功如何计算？<br>这就需要解微分方程了，从微分方程中可知质点的运动轨迹。   </p>
<h3 id="另一个角度来思考"><a href="#另一个角度来思考" class="headerlink" title="另一个角度来思考"></a>另一个角度来思考</h3><p>F有两个分量,dr也有两个分量：   </p>
<script type="math/tex; mode=display">\vec{F} = <M,N></script><script type="math/tex; mode=display">\mathrm{d}\vec{r} = <\mathrm{d} x,\mathrm{d} y></script><p>注意后者虽然形似向量，却不是真正的向量。这样线积分的方程就可以写成这样：   </p>
<script type="math/tex; mode=display">\int_C \vec{F}\cdot\mathrm{d}\vec{r}
=\int_C M\mathrm{d}x+N\mathrm{d}y</script><p>现在已经不是向量场而是微分运算了，但是他们的本质是相同的，所以关键在于如何计算这个积分。对于这个积分，M和N都依赖于x和y，如果仅对其中一个求积分，那么另一个就不能够被消掉。难点在于x和y互相关联。那么有人就会想到使用变量转换，但是无论怎么变换肯定会存在两个变量。实际上，曲线c只有一个参数，最终我们希望只剩下一个变量，这样就成为求单变量积分的问题了。解决的办法是：把x和y写成含有同一个变量的式子，然后用这个变量替换x和y。    </p>
<script type="math/tex; mode=display">\int_C \vec{F}\cdot\mathrm{d}\vec{r}
=\int_C -y\mathrm{d}x+x\mathrm{d}y\\
=\int_C -t^2\mathrm{d}t+t\cdot2t\mathrm{d}t
=\int_{0}^{1}t^2\mathrm{d}t=\frac{1}{3}</script><p>注意：<br>线积分只取决于轨迹C，跟如何参数化无关。所以只要能简化成任何一个参数都行，比如使用极坐标。    </p>
<h2 id="2-3-Geometric-Approach-几何法"><a href="#2-3-Geometric-Approach-几何法" class="headerlink" title="2.3 Geometric Approach 几何法"></a>2.3 Geometric Approach 几何法</h2><p>首先来看看向量dr的含义。什么是向量 $\mathrm{d}\vec{r}$，什么是向量 $\Delta \vec{r}$ ?   </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/lineTangent.png" alt="ineTangent"></p>
<p>在轨迹上取非常小的一段，$\Delta \vec{r}$ 的方向就是向量的方向，它与单位切向量 $\vec{T}$ 有相同的方向。所以，$\Delta \vec{r}$ 的长度就是就是轨迹上的弧长，记为 $\Delta s$。这个向量方向沿着切线方向，大小为轨迹的弧长。   </p>
<script type="math/tex; mode=display">\mathrm{d}\vec{r} = <\mathrm{d}x,\mathrm{d}y>=\widehat{T}\mathrm{d}s</script><script type="math/tex; mode=display">\frac{\mathrm{d}\vec{r}}{\mathrm{d}t} = <\frac{\mathrm{d}x}{\mathrm{d}t},\frac{\mathrm{d}y}{\mathrm{d}t}>=\widehat{T}\frac{\mathrm{d}s}{\mathrm{d}t}</script><script type="math/tex; mode=display">\int_C \vec{F}\cdot\mathrm{d}\vec{r}
=\int_C M\mathrm{d}x+N\mathrm{d}y
=\int_C \vec{F}\cdot\widehat{T}\mathrm{d}s</script><p>F和T的点积是一个标量，几何上表示外力投影到轨迹切线方向的成分，然后求出这个成分在曲线上的积分。结果是一样的，但是这种思考方法会让问题变得简单。   </p>
<p>回顾上一个例子，使用几何法，对每一小段轨迹所受力在切线方向的投影总和，与积分得到的结果非常近似。     </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/lineIntegralTangenta.gif" alt="lineIntegralTangenta"></p>
<h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>轨迹是以原点为圆心a为半径的圆，逆时针旋转，向量场为:</p>
<script type="math/tex; mode=display">\vec{F}=x\widehat{i}+y\widehat{j}</script><p>对于这个例子，采用几何法，在轨迹上任意一点，外力恒垂直于运动方向，所以做功为0。   </p>
<script type="math/tex; mode=display">\vec{F}\perp\widehat{T}</script><script type="math/tex; mode=display">\vec{F}\cdot\widehat{T}=0</script><script type="math/tex; mode=display">\int_C \vec{F}\cdot\widehat{T}\mathrm{d}s=0</script><p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/lineIntegralCircle.gif" alt="lineIntegralCircle"></p>
<p>现在考虑，轨迹不变，向量场为：</p>
<script type="math/tex; mode=display">\vec{F}=-y\widehat{i}+x\widehat{j}</script><p>这时，F与切线方向相同   </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/lineIntegralCircle2.gif" alt="lineIntegralCircle2"></p>
<script type="math/tex; mode=display">\vec{F}\cdot\widehat{T}=|\vec{F}|=a</script><script type="math/tex; mode=display">\int_C \vec{F}\cdot\widehat{T}\mathrm{d}s
=\int_C a\mathrm{d}s=2\pi a^2</script><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>线积分的三种思考方式：</p>
<ul>
<li>单变量的向量积</li>
<li>多变量的微分</li>
<li>几何法</li>
</ul>
<h2 id="2-4-Example-Line-Integrals-for-Work-例子：功的线积分"><a href="#2-4-Example-Line-Integrals-for-Work-例子：功的线积分" class="headerlink" title="2.4 Example: Line Integrals for Work 例子：功的线积分"></a>2.4 Example: Line Integrals for Work 例子：功的线积分</h2><p>回顾一下线积分：<br>平面上有一曲线C，有一向量场来描述每一个点上的向量，我们要找出沿着这条曲线所做的功：</p>
<script type="math/tex; mode=display">\int_C \vec{F}\cdot\mathrm{d}\vec{r}
=\int_C \vec{F}\cdot\widehat{T}\mathrm{d}s
=\int_C M\mathrm{d}x+N\mathrm{d}y</script><p>三个公式分别为定义式，几何表达式和直角坐标系下表达式。   </p>
<h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>在向量场yi+xj里，质点沿一扇形轨迹运动，扇形轨迹由三部分构成。   </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/lineIntegralFan.gif" alt="lineIntegralFan"></p>
<p>要计算这个线积分，只要三段分别求和再相加就可以了。   </p>
<p>c1：<br>从(0,0) 到(1,0)，y=0, dy=0</p>
<script type="math/tex; mode=display">\int_{c1} y\mathrm{d}x+x\mathrm{d}y=0</script><p>c2:<br>单位圆的一部分。根据圆的参数方程：</p>
<script type="math/tex; mode=display">\int_{c2} y\mathrm{d}x+x\mathrm{d}y\\
=\int_{0}^{\frac{\pi}{4}}\sin\theta(-\sin\theta\mathrm{d}\theta)+\cos\theta(-\cos\theta\mathrm{d}\theta)\\
=\int_{0}^{\frac{\pi}{4}}\cos^2\theta-\sin^2\theta\mathrm{d}\theta
=\int_{0}^{\frac{\pi}{4}}\cos 2\theta\mathrm{d}\theta=\frac{1}{2}</script><p>c3:<br>参数化这条路径：</p>
<script type="math/tex; mode=display">x=\frac{1}{\sqrt{2}}-\frac{1}{\sqrt{2}}t</script><script type="math/tex; mode=display">y=\frac{1}{\sqrt{2}}-\frac{1}{\sqrt{2}}t</script><script type="math/tex; mode=display">0\leq t\leq 1</script><p>更简单的表达，使用c3的反向路径：  </p>
<script type="math/tex; mode=display">x=t</script><script type="math/tex; mode=display">y=t</script><script type="math/tex; mode=display">0\leq t\leq \frac{1}{\sqrt{2}}</script><script type="math/tex; mode=display">\int_{-c3} =-\int_{c3}\\
=\int_{\frac{1}{\sqrt{2}}}^{0}y\mathrm{d}x+x\mathrm{d}y
=\int_{\frac{1}{\sqrt{2}}}^{0}2t\mathrm{d}t=-\frac{1}{2}</script><p>总功：</p>
<script type="math/tex; mode=display">\int_{c} =\int_{c1}+\int_{c2}+\int_{c3}=0</script><h2 id="2-5-Fundamental-Theorem-for-Line-Integrals-线积分的基本定理"><a href="#2-5-Fundamental-Theorem-for-Line-Integrals-线积分的基本定理" class="headerlink" title="2.5 Fundamental Theorem for Line Integrals  线积分的基本定理"></a>2.5 Fundamental Theorem for Line Integrals  线积分的基本定理</h2><p>怎么避免计算？<br>当多元方程存在的时候，就有梯度向量。但实际上，是一个向量场。在这种特殊情况下，向量场实际上是一个函数的梯度，也就是梯度场。f是关于x和y的函数，称为向量场的势函数（potential）。</p>
<p>在物理学中，计算重力或者电场所做的功，只需要计算起点和终点的势能差，与路径无关。</p>
<p>一个微积分的基本定理是，如果对函数的导数积分，就可以得到原函数。多元微积分也一样，如果对函数的梯度做线积分，也可以得到原函数。</p>
<p><strong>基本定理：</strong><br>如果沿轨迹对向量场，即方程的梯度做线积分，其结果为原方程的终点与起点值之差</p>
<script type="math/tex; mode=display">\int_{c}\nabla f \cdot\mathrm{d}\vec{r}=f(P_1)-f(P_0)</script><p>注意：非常有局限性，仅仅在向量场是梯度的情况下才满足。  </p>
<p>来看看基本定理的物理和几何解释。   </p>
<p>对梯度积分，其实是对函数的导数积分：</p>
<script type="math/tex; mode=display">\int_{c}f_x \mathrm{d}x+f_y\mathrm{d}y
=\int_{c}\mathrm{d}f=f(P_1)-f(P_0)</script><p><strong>证明：</strong>    </p>
<script type="math/tex; mode=display">\int_{c}\nabla f \cdot\mathrm{d}\vec{r}
=\int_{c}(f_x \frac{\mathrm{d}x}{\mathrm{d}t}+f_y\frac{\mathrm{d}y}{\mathrm{d}t})\mathrm{d}t\\
=\int_{t_0}^{t_1}\frac{\mathrm{d}f}{\mathrm{d}t}\mathrm{d}t
=\left [ f(x(t),y(t)) \right ]_ {t_0}^{t_1}
=f(P_1)-f(P_0)</script><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><p>回到最开始的例子，向量场为：</p>
<script type="math/tex; mode=display">\vec{F}=\left \langle y,x \right \rangle = \nabla f</script><script type="math/tex; mode=display">f=xy</script><p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/lineIntegralFanPlot.png" alt="lineIntegralFanPlot"></p>
<p>图像显示了等高线和向量场的重合，可以看出，向量场垂直于等高线，所以也是梯度。由于在同一等高线上，各点的值相等，物理上可以理解为势能相等。再来看扇形的运动轨迹，从一条等高线移动到另一条等高线，再移动回原来的等高线，做功为0。</p>
<p>物理上来说，重力场，电场都是势函数的梯度场，但是有很多的向量场不是梯度场，比如说磁场。  </p>
<h2 id="2-6-Conservative-Fields-Path-Independence-Exact-Differentials-保守场，路径独立和恰当微分"><a href="#2-6-Conservative-Fields-Path-Independence-Exact-Differentials-保守场，路径独立和恰当微分" class="headerlink" title="2.6 Conservative Fields, Path Independence, Exact Differentials 保守场，路径独立和恰当微分"></a>2.6 Conservative Fields, Path Independence, Exact Differentials 保守场，路径独立和恰当微分</h2><p>如果F是梯度场，会得到什么结果？<br>梯度场做的功有很多漂亮的性质，但是它们是特殊的向量场。梯度场有这样一些特殊的性质：</p>
<ul>
<li><p>路径独立（path independent）<br>如果要计算线积分，无论两点间路径如何，积分值只跟起止点有关。只有在梯度场里才成立。如果c1，c2有相同的起止点：   </p>
<script type="math/tex; mode=display">\int_{c_1}\nabla f \cdot\mathrm{d}\vec{r}
=\int_{c_2}\nabla f \cdot\mathrm{d}\vec{r}</script></li>
<li><p>梯度场是保守场（conservative）<br>保守这个次来源于物理学，是说能量的守恒。在这个场中，不可能无偿地得到能量。如果有一条曲线C是闭合曲线，曲线上从一点出发最后会回到同一点上。沿C所做的功为0。这就是“保守”的定义。</p>
<script type="math/tex; mode=display">\int_{c}\nabla f \cdot\mathrm{d}\vec{r}=0</script><p>不保守意味着沿着曲线一圈所做的功不为0。</p>
</li>
</ul>
<p>不是所有的向量场都是保守场，回忆一下之前的例子</p>
<script type="math/tex; mode=display">\vec{F}=\left \langle -y,x \right \rangle</script><p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/notConservativeField.png" alt="notConservativeField"></p>
<p>这个向量场绕着原点逆时针旋转，也不是任何函数的梯度。也不是路径独立的。</p>
<script type="math/tex; mode=display">\int_C \vec{F}\cdot\widehat{T}\mathrm{d}s
=\int_C 1\mathrm{d}s=2\pi</script><p>来一些物理学的知识（不考虑正负号）：<br>力场是某种势的梯度。力F做的功就是势的变化。保守性说明不能够从场中无偿提取能量（不然就是永动机了）。总能量守恒。   </p>
<p>等价性质：   </p>
<ul>
<li>（1）向量场保守。所有闭合曲线线积分是0。   </li>
<li>（2）线积分路径独立。闭合曲线起点终点相同，差为0。</li>
<li>（3）场是梯度场。</li>
<li>（4）恰当微分Mdx+Ndy可以写成某个函数f的微分形式。</li>
</ul>
<p>如果重力场不是保守场的世界：<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/Ascending%20and%20Descending1.jpg" alt="AscendingAndDescending1"><br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/Ascending%20and%20Descending2.jpeg" alt="AscendingAndDescending1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Double-Integrals-二重积分&quot;&gt;&lt;a href=&quot;#1-Double-Integrals-二重积分&quot; class=&quot;headerlink&quot; title=&quot;1. Double Integrals 二重积分&quot;&gt;&lt;/a&gt;1. Double Integrals 二重积分&lt;/h1&gt;&lt;p&gt;回顾单变量积分，积分可以看成函数与坐标轴所围成的面积。&lt;br&gt;&lt;img src=&quot;http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%89%EF%BC%9A%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E7%A7%AF%E5%88%86/integral.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="苦境" scheme="http://ihozh.com/categories/%E8%8B%A6%E5%A2%83/"/>
    
    
      <category term="微积分" scheme="http://ihozh.com/tags/%E5%BE%AE%E7%A7%AF%E5%88%86/"/>
    
      <category term="公开课" scheme="http://ihozh.com/tags/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
      <category term="18.02" scheme="http://ihozh.com/tags/18-02/"/>
    
      <category term="二重积分" scheme="http://ihozh.com/tags/%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86/"/>
    
      <category term="线积分" scheme="http://ihozh.com/tags/%E7%BA%BF%E7%A7%AF%E5%88%86/"/>
    
      <category term="工程数学" scheme="http://ihozh.com/tags/%E5%B7%A5%E7%A8%8B%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>MIT多元微积分二：偏微分 笔记</title>
    <link href="http://ihozh.com/2017/05/24/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/"/>
    <id>http://ihozh.com/2017/05/24/MIT多元微积分二：偏微分-笔记/</id>
    <published>2017-05-24T18:35:50.000Z</published>
    <updated>2017-06-19T09:53:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Functions-of-Two-Variables-Tangent-Approximation-and-Optimization"><a href="#1-Functions-of-Two-Variables-Tangent-Approximation-and-Optimization" class="headerlink" title="1. Functions of Two Variables, Tangent Approximation and Optimization"></a>1. Functions of Two Variables, Tangent Approximation and Optimization</h1><h2 id="1-1-Functions-of-Two-Variables-Graphs-二元函数：图"><a href="#1-1-Functions-of-Two-Variables-Graphs-二元函数：图" class="headerlink" title="1.1 Functions of Two Variables: Graphs 二元函数：图"></a>1.1 Functions of Two Variables: Graphs 二元函数：图</h2><p>有没有试着去画一个二元函数的图，比起一元函数来，画二元函数的图简直就是灾难。   </p>
<script type="math/tex; mode=display">f(x,y)</script><p>如何直观的表示一个二元函数的图，一个很好的列子就是等高线图：   </p>
<a id="more"></a>
<h2 id="1-2-Level-Curves-and-Contour-Plots-水平线和等高线图"><a href="#1-2-Level-Curves-and-Contour-Plots-水平线和等高线图" class="headerlink" title="1.2 Level Curves and Contour Plots 水平线和等高线图"></a>1.2 Level Curves and Contour Plots 水平线和等高线图</h2><p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/%E7%AD%89%E9%AB%98%E7%BA%BF.png" alt="等高线图"><br>等高线图就是把一个二元函数压扁在一个平面上，平面上不同的高线实际上是不同坐标的横截面。同一条等高线上所有的值都是一个常数。<br>例：画出这个函数的等高线图：</p>
<script type="math/tex; mode=display">f(x,y)=-y</script><p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/%E7%AD%89%E9%AB%98%E7%BA%BF%E5%9B%BE2.png" alt=""></p>
<script type="math/tex; mode=display">f(x,y)=1-(x^2+y^2)</script><p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/%E7%AD%89%E9%AB%98%E7%BA%BF%E5%9B%BE3.png" alt=""><br>同心圆，等高线的间隔越来越小，说明越来越陡。   </p>
<h2 id="1-3-Partial-Derivatives-偏微分"><a href="#1-3-Partial-Derivatives-偏微分" class="headerlink" title="1.3 Partial Derivatives 偏微分"></a>1.3 Partial Derivatives 偏微分</h2><p>根据等高线图，当固定一个变量为定值的时候，可以看出函数随着另一个变量的变化情况。<br>偏导数(Partial) 的定义就是每次只对一个变量求导数。多元函数只有偏导数。   </p>
<script type="math/tex; mode=display">\frac{\partial }{\partial x} f(x_0,y_0)=\lim_{\Delta x\rightarrow 0} \frac{(x_0+\Delta x,y_0)-(x_0,y_0)}{\Delta x}</script><script type="math/tex; mode=display">\frac{\partial }{\partial y} f(x_0,y_0)=\lim_{\Delta y\rightarrow 0} \frac{(x_0,y_0+\Delta y)-(x_0,y_0)}{\Delta y}</script><p>偏微分的几何意义：<br>固定一个变量为常数，用对应的平面切割函数。在平面内截线随另一个变量变化。</p>
<h2 id="1-4-Approximation-Formula-近似公式"><a href="#1-4-Approximation-Formula-近似公式" class="headerlink" title="1.4 Approximation Formula 近似公式"></a>1.4 Approximation Formula 近似公式</h2><p>近似方程是用来表示多变量同时变动时的方程。直观的想法就是x的变化加上y的变化。</p>
<script type="math/tex; mode=display">z=f(x,y)</script><script type="math/tex; mode=display">\Delta z \approx f_x \Delta x + f_y \Delta y</script><p>在多元函数的任一点上，可分别做固定x轴和y轴的切线，两个切线可以构成一个切平面。</p>
<script type="math/tex; mode=display">\frac{\partial}{\partial x} f(x_0,y_0)=a\Rightarrow L_1=\left\{\begin{matrix}
z=z_0+a(x-x_0) & \\
y=y_0
\end{matrix}\right.</script><script type="math/tex; mode=display">\frac{\partial}{\partial y} f(x_0,y_0)=b\Rightarrow L_1=\left\{\begin{matrix}
z=z_0+b(y-y_0) & \\
x=x_0
\end{matrix}\right.</script><p>两条直线都在切平面里，切平面的平面方程：</p>
<script type="math/tex; mode=display">z=z_0+a(x-x_0)+b(y-y_0)</script><p>还有一种方法是：用参数方程表示两条直线，然后方向向量做叉乘，得到法向量，再用法向量得到平面方程。<br>函数的图像和切平面非常接近。可以用这个公式来估计x和y的变化对函数值的影响。   </p>
<h2 id="1-5-Optimization-Problems-优化问题"><a href="#1-5-Optimization-Problems-优化问题" class="headerlink" title="1.5 Optimization Problems 优化问题"></a>1.5 Optimization Problems 优化问题</h2><p>如何找到多元函数的极大值和极小值。   </p>
<p>在局部极小值极大值处，对各个变量的一阶偏导数都为0。  </p>
<p>这时候会发现函数的切平面是水平的。     </p>
<p>这个条件是必要但不充分的，有其他的偏导数为0的点但不是极值点。<br>定义：在f上有一点为 <strong>临界点</strong>（critical point）,如果对各个变量的偏导数为0。<br>既不是最大值也不是最小值的点，称为 <strong>鞍点</strong>。<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/Saddle_point-min.png" alt="鞍点"><br>临界点可能是局部极大，局部极小或者鞍点。   </p>
<h2 id="1-6-Least-Squares-最小二乘"><a href="#1-6-Least-Squares-最小二乘" class="headerlink" title="1.6 Least Squares 最小二乘"></a>1.6 Least Squares 最小二乘</h2><p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/Linear_regression.png" alt="最小二乘"><br>对于所有的测量点，找到一条直线，使得所有点到直线的y坐标的差的平方最小(惯例)。</p>
<script type="math/tex; mode=display">y=ax+b</script><p>最小化：</p>
<script type="math/tex; mode=display">D=\sum_{i=1}^n [y_i-(ax_i+b_i)]^2</script><script type="math/tex; mode=display">\frac{\partial D}{\partial a}=\sum_{i=1}^n 2[y_i-(ax_i+b_i)](-x_i)</script><script type="math/tex; mode=display">\frac{\partial D}{\partial b}=\sum_{i=1}^n 2[y_i-(ax_i+b_i)](-1)</script><p>得到2*2线性方程组</p>
<script type="math/tex; mode=display">(\sum_{i=1}^n x_i^2)a+(\sum_{i=1}^n x_i)b=\sum_{i=1}^n x_iy_i</script><script type="math/tex; mode=display">(\sum_{i=1}^n x_i^2)a+nb=\sum_{i=1}^n y_i</script><p><strong>摩尔定律的指数方程做最小二乘</strong></p>
<script type="math/tex; mode=display">y=c e^{ax}</script><script type="math/tex; mode=display">\ln(y)=\ln(c)+ax</script><h2 id="1-7-Second-Derivative-Test-二阶导数检验：边界与无穷"><a href="#1-7-Second-Derivative-Test-二阶导数检验：边界与无穷" class="headerlink" title="1.7 Second Derivative Test 二阶导数检验：边界与无穷"></a>1.7 Second Derivative Test 二阶导数检验：边界与无穷</h2><p>问题是如何判断局部最大值，局部最小值，鞍点。<br>如何找到全局最大值和最小值。<br>通常来说，最值可能出现在临界点，边界处或无穷远处。</p>
<h3 id="1-7-1-二次方程"><a href="#1-7-1-二次方程" class="headerlink" title="1.7.1 二次方程"></a>1.7.1 二次方程</h3><script type="math/tex; mode=display">D=ax^2+bxy+cy^2</script><p>如果有二次方程，可以将方程修改为平方项的形式，然后分析各项系数正负来判断。<br>有一种情况，某一变量系数为0，称作退化（degenerate）。退化临界点有可能是极大值或极小值。在高次方程中，也有可能是退化鞍点。      </p>
<script type="math/tex; mode=display">D=x^3+y^3</script><p>在原点处就是退化鞍点。   </p>
<p>也可以从判别式的角度得到同样的结论。   </p>
<ul>
<li>if $4ac-b^2&lt;0$，说明 $x/y$ 有正有负，存在鞍点。   </li>
<li>if $4ac-b^2&gt;0$，和x轴没有交点，恒正恒负，由a来判断<ul>
<li>if $a&gt;0$，存在极小值</li>
<li>if $a&lt;0$，存在极大值   </li>
</ul>
</li>
<li>if $b^2-4ac=0$，不好判断，退化</li>
</ul>
<p>下图分别为三种情况的函数图像：   </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/%E4%BA%8C%E6%AC%A1%E9%9E%8D%E7%82%B9.png" alt=""><br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/%E4%BA%8C%E6%AC%A1%E6%9E%81%E5%80%BC.png" alt=""><br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/%E4%BA%8C%E6%AC%A1%E9%80%80%E5%8C%96.png" alt=""></p>
<h3 id="1-7-2-导数检测"><a href="#1-7-2-导数检测" class="headerlink" title="1.7.2 导数检测"></a>1.7.2 导数检测</h3><script type="math/tex; mode=display">A=\frac{\partial^2 f}{\partial x^2}=f_{xx}</script><script type="math/tex; mode=display">B=\frac{\partial^2 f}{\partial x \partial y }=f_{xy}=f_{yx}</script><script type="math/tex; mode=display">C=\frac{\partial^2 f}{\partial y^2}=f_{yy}</script><p>对于二阶函数    </p>
<script type="math/tex; mode=display">A=2a</script><script type="math/tex; mode=display">B=b</script><script type="math/tex; mode=display">C=2c</script><script type="math/tex; mode=display">AC-B^2=4ac-b^2</script><blockquote>
<p>为什么要用二阶导数进行判断？二阶导数判断是如何来的？<br>这要从泰勒公式说起，首先看函数的一阶展开：    </p>
</blockquote>
<script type="math/tex; mode=display">\Delta f\approx f_x(x-x_0)+f_y(y-y_0)</script><p>当在零界点的时候，变化为0，一阶展开是不够的，将函数进行二阶展开：</p>
<script type="math/tex; mode=display">\Delta f\approx f_x(x-x_0)+f_y(y-y_0)\\+
\frac{1}{2}f_{xx}(x-x_0)^2+
f_{xy}(x-x_0)(y-y_0)+
\frac{1}{2}f_{yy}(y-y_0)^2</script><p>发现二阶项就是标准的二阶方程，我们可以用前面同样的方法进行分析，说明通过二阶导数来分析函数的极大极小值是合理的。</p>
<blockquote>
<p>为什么判别式为0的时候不能判定函数形状？   </p>
</blockquote>
<p>当判别式为0的时候，二阶展开也不够用了，这时就需要判断更高阶的情况。在非退化情况下，函数的形状取决于二次项。在退化情形下，函数图像取决于更高阶导数。      </p>
<h2 id="1-8-例子"><a href="#1-8-例子" class="headerlink" title="1.8 例子"></a>1.8 例子</h2><p>对于任意函数，如何分析？</p>
<ol>
<li>通过一阶导找到临界点</li>
<li>通过二阶导判断类别</li>
<li>通过A的正负判断极大极小</li>
<li>完善，判断边界</li>
</ol>
<script type="math/tex; mode=display">f(x,y)=x+y+\frac{1}{xy}</script><p>第一步：</p>
<script type="math/tex; mode=display">f_x=1-\frac{1}{x^2y}=0</script><script type="math/tex; mode=display">f_y=1-\frac{1}{xy^2}=0</script><p>可得 $(x,y)=(1,1)$，这是临界点，下面要判断临界点类型</p>
<p>第二步：</p>
<script type="math/tex; mode=display">A=f_{xx}=\frac{2}{x^3y}</script><script type="math/tex; mode=display">B=f_{xy}=\frac{1}{x^2y^2}</script><script type="math/tex; mode=display">C=f_{yy}=\frac{2}{xy^3}</script><p>$AC-B^2&gt;0$，所以临界点(1,1)是极大值或者极小值</p>
<p>第三步：<br>$A&gt;0$,(1,1)是极小值</p>
<p>第四步：<br>考虑哪里是最大值，有边界处（0，0）和无穷远处，带入方程为无穷大，这时方程有最大值。   </p>
<h1 id="2-Chain-Rule-Gradient-and-Directional-Derivatives-链式法则，梯度和方向导数"><a href="#2-Chain-Rule-Gradient-and-Directional-Derivatives-链式法则，梯度和方向导数" class="headerlink" title="2.Chain Rule, Gradient and Directional Derivatives 链式法则，梯度和方向导数"></a>2.Chain Rule, Gradient and Directional Derivatives 链式法则，梯度和方向导数</h1><p>这一节会讲分析多元方程的更多方法。我们想知道多元函数各个变量的变化情况，在任意方向上如何计算多变量的变化。这一节可以帮助我们去解决这些问题。  </p>
<p>通常所说的函数指的是显函数，表达式为y=f(x)。很多时候，并不能直接通过x去表示y，而是F(x,y)=0的形式，这就是隐函数。<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/%E5%BF%83%E7%BA%BF.png" alt="">   </p>
<p>在求隐函数的微分的时候，可以使用些小窍门：</p>
<script type="math/tex; mode=display">y=f(x)</script><script type="math/tex; mode=display">\mathrm{d} y=f'(x) \mathrm{d}x</script><p>对于多元或者复杂的函数，有一套标准的方法可以进行分析。  </p>
<p>首先说下单变量下的链式法则，有一个函数链$z=f(g(x))$。<br>链式法则要回答的是链的斜率，要求整条链的导数。   </p>
<script type="math/tex; mode=display">\frac{\mathrm{d} z}{\mathrm{d} x}=
\frac{\mathrm{d} z}{\mathrm{d} y}
\frac{\mathrm{d} y}{\mathrm{d} x}</script><p>我们要求的复杂函数导数就会转化成两个已知简单函数的导数。看一个例子来直观的理解：      </p>
<script type="math/tex; mode=display">\sin(3x)</script><p>内函数是$y=3x$，外函数是$z=\sin(y)$。<br>根据链式法则，得到：</p>
<script type="math/tex; mode=display">\frac{\mathrm{d} z}{\mathrm{d} x}=
3\cos{3x}</script><p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/%E9%93%BE%E5%BC%8F%E6%B3%95%E5%88%99%E4%BE%8B%E5%AD%90.png" alt=""></p>
<p>函数z的频率是正弦函数频率的三倍，所以变化的幅度更大，在原点处，斜率也是3倍，这和导数图像的结果完全一样。这就是链式法则的直观的表示。   </p>
<h2 id="2-1-Total-Differentials-and-the-Chain-Rule-全微分和链式法则"><a href="#2-1-Total-Differentials-and-the-Chain-Rule-全微分和链式法则" class="headerlink" title="2.1 Total Differentials and the Chain Rule 全微分和链式法则"></a>2.1 Total Differentials and the Chain Rule 全微分和链式法则</h2><p>全微分（Total Differentials）先来给个结果，对于f(x,y,z)，全微分：</p>
<script type="math/tex; mode=display">\mathrm{d} f=f_x\mathrm{d} x+
f_y\mathrm{d}y+
f_z\mathrm{d}z</script><p>d 就是微分符号，如何去考虑微分符号? 首先看看不能怎么去考虑：      </p>
<script type="math/tex; mode=display">\mathrm{d} f\neq \Delta f</script><p>$\Delta f$ 表示数量，而 $\mathrm{d} f$ 是符号。微分符号可以这样认为：</p>
<ul>
<li>反映了变量变化时对函数的影响。    </li>
<li>是一个微小变化的占位符。   <blockquote>
<p>有一个曾经使用过的公式，注意这里是约等号而不是等号：   </p>
</blockquote>
</li>
</ul>
<script type="math/tex; mode=display">\Delta f \approx f_x\Delta x+
f_y\Delta y+
f_z\Delta z</script><ul>
<li>同时除以 $\mathrm{d}t$ 可以得到t趋近于0变化率。<script type="math/tex; mode=display">\frac{\mathrm{d} f}{\mathrm{d} t} =f_x\frac{\mathrm{d} x}{\mathrm{d} t}+
f_y\frac{\mathrm{d} y}{\mathrm{d} t}+
f_z\frac{\mathrm{d} z}{\mathrm{d} t}</script></li>
</ul>
<p>这个就是 <strong>链式法则</strong>（chain rule）。如果函数依赖于某些变量，变量又依赖于其他变量，链式法则可以寻找出函数在新变量下的变化率以及个变量之间的依赖关系。   </p>
<p>先来一个不太严谨的证明：<br>如果x,y,z分别是t的函数，则有</p>
<script type="math/tex; mode=display">\mathrm{d}x=x'(t) \mathrm{d}t,
\mathrm{d}y=y'(t) \mathrm{d}t,
\mathrm{d}z=z'(t) \mathrm{d}t</script><p>带入后：</p>
<script type="math/tex; mode=display">\mathrm{d}f=f_xx'(t)\mathrm{d}t+
f_yy'(t)\mathrm{d}t+
f_zz'(t)\mathrm{d}t</script><p>除以 $\mathrm{d} t$ 就是链式法则。   </p>
<p>更好点的证明：  </p>
<script type="math/tex; mode=display">\Delta f \approx f_x\Delta x+
f_y\Delta y+
f_z\Delta z</script><script type="math/tex; mode=display">\frac{\Delta f}{\Delta t} \approx
\frac{f_x\Delta x+
f_y\Delta y+
f_z\Delta z}{\Delta t}</script><p>当 $\Delta t$ 非常小的时候，就出现了0/0这种情况，这就是微积分要处理的。微积分保留了这个值，在极限条件下这个值就是导数。变化率趋近的值就是微分,约等号也就变成等号了。这就是链式法则最核心的原理。    </p>
<script type="math/tex; mode=display">\frac{\Delta f}{\Delta t} \rightarrow
\frac{\mathrm d f}{\mathrm d t}，
\frac{\Delta x}{\Delta t} \rightarrow
\frac{\mathrm d x}{\mathrm d t}</script><p>例子：</p>
<script type="math/tex; mode=display">w=x^2y+z,x=t,y=e^t,z=\sin t</script><script type="math/tex; mode=display">\frac{\mathrm d w}{\mathrm d t}=
2xy\frac{\mathrm d x}{\mathrm d t}+
x^2\frac{\mathrm d y}{\mathrm d t}+
1 \frac{\mathrm d z}{\mathrm d t}</script><script type="math/tex; mode=display">=2te^t+t^2e^t+\cos t</script><p>也可以直接将各部分值带入，可以得到同样的结果，链式法则本质上是将多变量转化为单变量。如果x,y,z不能写成t的显性函数，则只能使用链式法则。      </p>
<h2 id="2-2-链式法则和微分的关系"><a href="#2-2-链式法则和微分的关系" class="headerlink" title="2.2 链式法则和微分的关系"></a>2.2 链式法则和微分的关系</h2><p>一个很有意思的地方，很多人知道导数的乘法法则，确实乘法法则是链式法则的一个应用，反过来乘法法则也可以通过链式法则来证明。   </p>
<script type="math/tex; mode=display">f=uv,u=u(t),v=v(t)</script><script type="math/tex; mode=display">\frac{\mathrm d (uv)}{\mathrm d t}=
f_u\frac{\mathrm d u}{\mathrm d t}+
f_v\frac{\mathrm d v}{\mathrm d t}\\
=v\frac{\mathrm d u}{\mathrm d t}+
u\frac{\mathrm d v}{\mathrm d t}</script><p>再来看看除法法则：</p>
<script type="math/tex; mode=display">g=\frac{u}{v},u=u(t),v=v(t)</script><script type="math/tex; mode=display">\frac{\mathrm d g}{\mathrm d t}=
\frac{1}{v}\frac{\mathrm d u}{\mathrm d t}+
\frac{-u}{v^2}\frac{\mathrm d v}{\mathrm d t}\\
=\frac{u'v-v'u}{v^2}</script><h2 id="2-3-多变量的链式法则"><a href="#2-3-多变量的链式法则" class="headerlink" title="2.3 多变量的链式法则"></a>2.3 多变量的链式法则</h2><p>到现在为止，感觉一切都没有问题，都是那么完美。突然有声音在问，之前的链式法则，都是认为所有变量都是关于共同变量t的，都依赖于同一个t，这本质上就是单变量的求导，如果每个变量依赖多个不同的变量，比如说一个极坐标下的方程，链式法则怎么用，函数w关于u,v的偏导数到底是什么？   </p>
<script type="math/tex; mode=display">w=f(x,y),x=x(u,v),y=y(u,v)</script><p>可以把x和y的公式带入，w就变成了u和v的方程。但是求这个偏导数绝对会让人抓狂的。或者，将链式法则进行到底：    </p>
<script type="math/tex; mode=display">\mathrm d w = f_x\mathrm d x+f_y\mathrm d y</script><p>如果改变u的话，w如何改变？x，y如何改变，这些是微分关系给我们的。   </p>
<script type="math/tex; mode=display">\mathrm d w =
f_x(x_u \mathrm d u+x_v \mathrm d v)+
f_y(y_u \mathrm d u+y_v \mathrm d v)\\
=(f_xx_u+f_yy_u)\mathrm d u+
(f_xx_v+f_yy_v)\mathrm d v</script><p>整理下这个式子，看括号内的部分：  </p>
<script type="math/tex; mode=display">\frac{\partial f}{\partial u}=
\frac{\partial f}{\partial x}
\frac{\partial x}{\partial u}+
\frac{\partial f}{\partial y}
\frac{\partial y}{\partial u}</script><script type="math/tex; mode=display">\frac{\partial f}{\partial v}=
\frac{\partial f}{\partial x}
\frac{\partial x}{\partial v}+
\frac{\partial f}{\partial y}
\frac{\partial y}{\partial v}</script><p>理解这个式子也不难，我们想知道，u如何影响f，f是关于x和y的函数，x和y又依赖于u，这就是链式法则的精华了。<br>有人发现分子分母上都有同样的偏微分符号，是不是可以再词约分化解，答案是不行。<br><strong>偏微分不能约分，偏微分不能约分，偏微分不能约分。</strong> 但是上下同时有微分符号，是可以约分的。    </p>
<h2 id="2-4-例子"><a href="#2-4-例子" class="headerlink" title="2.4 例子"></a>2.4 例子</h2><p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/%E6%9E%81%E5%9D%90%E6%A0%871.png" alt=""><br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/%E6%9E%81%E5%9D%90%E6%A0%872.png" alt=""></p>
<p>平面直角坐标系和极坐标系换元的公式是：   </p>
<script type="math/tex; mode=display">\left\{\begin{matrix}
x = r\cos\varphi \\
y = r\sin\varphi

\end{matrix}\right.</script><p>如果已知函数f(x,y)，想知道f关于 $r$ 或者 $\varphi$ 的变化，就可以用链式法则试下了。   </p>
<script type="math/tex; mode=display">\frac{\partial f}{\partial r}=
\frac{\partial f}{\partial x}
\frac{\partial x}{\partial r}+
\frac{\partial f}{\partial y}
\frac{\partial y}{\partial r} \\
=f_x\cos{\varphi}+f_y\sin{\varphi}</script><h2 id="2-5-Gradient-Definition-Perpendicular-to-Level-Curves-梯度"><a href="#2-5-Gradient-Definition-Perpendicular-to-Level-Curves-梯度" class="headerlink" title="2.5 Gradient: Definition, Perpendicular to Level Curves 梯度"></a>2.5 Gradient: Definition, Perpendicular to Level Curves 梯度</h2><p>回顾一下链式法则：</p>
<script type="math/tex; mode=display">\frac{\mathrm{d} w}{\mathrm{d} t} =w_x\frac{\mathrm{d} x}{\mathrm{d} t}+
w_y\frac{\mathrm{d} y}{\mathrm{d} t}+
w_z\frac{\mathrm{d} z}{\mathrm{d} t}</script><p>w的变化是由x，y，z的变化引起的。x，y，z又分别以自己的速度变化，通过的偏导数的影响直接影响原函数。偏导数告诉我们w对每个变量变化有多敏感。</p>
<p>用一种新的写法：    </p>
<script type="math/tex; mode=display">\frac{\mathrm{d} w}{\mathrm{d} t}=
\bigtriangledown w\cdot \frac{\mathrm{d}\overrightarrow{ r}}{\mathrm{d} t}</script><script type="math/tex; mode=display">\bigtriangledown w=\left \langle  w_x,w_y,w_z\right \rangle</script><script type="math/tex; mode=display">\frac{\mathrm{d}\overrightarrow{ r}}{\mathrm{d} t}=\left \langle  \frac{\mathrm{d} x}{\mathrm{d} t},
\frac{\mathrm{d} y}{\mathrm{d} t},
\frac{\mathrm{d} z}{\mathrm{d} t}\right \rangle</script><p>这个向量包含了所有的偏导数。每个点都会有一个向量。可以称为函数w在某一点（x,y,z）处的 <strong>梯度</strong> （gradient）。r对t的微分就是 <strong>速度向量</strong>（velocity vector）。   </p>
<p><strong>定理:</strong> 令w为常数，梯度向量垂直于原函数等值面。如图，画出函数的等高线，梯度向量是指向函数值更大的方向，并且垂直于等高线（投影于2维情况）。  </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/gradient_vis.png" alt=""></p>
<p>看一种最简单的情况：</p>
<script type="math/tex; mode=display">w=a_1x+a_2y+a_3z</script><script type="math/tex; mode=display">\bigtriangledown w=\left \langle  a_1,a_2,a_3\right \rangle</script><p>寻找这个函数的等值面，令w=c</p>
<script type="math/tex; mode=display">a_1x+a_2y+a_3z=c</script><p>发现，等值面就是平面。由于平面的法向量是</p>
<script type="math/tex; mode=display">\overrightarrow{n}=\left \langle  a_1,a_2,a_3\right \rangle</script><p>这个平面的法向量就是梯度向量。    </p>
<p>其实，对任何函数，都可以有这种线性的近似来代替函数本身。这意味着用切平面取代等值面。<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/%E8%BF%91%E4%BC%BC%E5%88%87%E5%B9%B3%E9%9D%A2.png" alt=""></p>
<p>再来看一个例子：</p>
<script type="math/tex; mode=display">w=x^2+y^2</script><script type="math/tex; mode=display">\bigtriangledown w=\left \langle  2x,2y\right \rangle</script><p>当w=c时，在等值面上有梯度向量<2x,2y>，如图所示，垂直于等值面：<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/%E4%BA%8C%E7%BB%B4%E6%A2%AF%E5%BA%A6.png" alt=""></2x,2y></p>
<h2 id="2-6-证明"><a href="#2-6-证明" class="headerlink" title="2.6 证明"></a>2.6 证明</h2><p>要理解向着等值曲线内部移动会发生什么？假设在等值曲线上有一个动点，这会令函数值保持为一个常数。通过链式法则，我们能够知道函数变化有多快。链式法则就是理解梯度向量和等值面之间的关键点。</p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/%E6%A2%AF%E5%BA%A6%E8%AF%81%E6%98%8E.png" alt=""></p>
<p>令 $\overrightarrow{r}=\overrightarrow{r}(t)$ 是一条在等值面 $w=c$ 上的曲线</p>
<p>首先观察速度向量，这个动点的速度向量和曲线相切，和等值面相切。</p>
<script type="math/tex; mode=display">\overrightarrow{v}=
\frac{\mathrm{d}\overrightarrow{r}}{\mathrm{d} t}</script><p>速度向量v和平面w=c相切，根据链式法则，我们知道w是如何变化的：   </p>
<script type="math/tex; mode=display">\frac{\mathrm{d} w}{\mathrm{d} t}=
\bigtriangledown w\cdot \frac{\mathrm{d}\overrightarrow{ r}}{\mathrm{d} t}</script><p>由于一直在等值面上运动，所以梯度是0，所以</p>
<script type="math/tex; mode=display">\frac{\mathrm{d} w}{\mathrm{d} t}=0，w(t)=c=常数</script><p>可以推出，梯度向量和速度向量垂直：   </p>
<script type="math/tex; mode=display">\bigtriangledown w \perp  \overrightarrow{ v}</script><p>更进一步的说，这对任何w=c上的动点，都成立。</p>
<script type="math/tex; mode=display">\bigtriangledown w \perp  切平面</script><p>如果用二维来说，会有等高线，运动方向是切向量方向，梯度垂直于切向量。   </p>
<h2 id="2-7-例子"><a href="#2-7-例子" class="headerlink" title="2.7 例子"></a>2.7 例子</h2><p>找到 $x^2+y^2-z^2=4$ 在点(2,1,1)的切平面。这个函数叫做双曲面（hyperpoloid），长得像这个样子：<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/hyperboloid.png" alt=""></p>
<p>这是 $w=x^2+y^2-z^2$ 在w=4时的等值面。梯度向量是：</p>
<script type="math/tex; mode=display">\bigtriangledown w =
\left \langle 2x,2y,-2z \right \rangle=
\left \langle 4,2,-2 \right \rangle</script><p>这是曲面或者是切平面的法向量。 <strong>曲面和切平面有相同的法向量</strong>。得到切平面的方程：</p>
<script type="math/tex; mode=display">4x+2y-2z=C</script><p>带入点（2，1，1），得到C=8。切平面和梯度向量如图所示：</p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/%E5%8F%8C%E6%9B%B2%E7%BA%BF.png" alt=""></p>
<p>换一个角度，使用微分来考虑：</p>
<script type="math/tex; mode=display">\mathrm{d} w=2x\mathrm{d} x+2y\mathrm{d} y-2z\mathrm{d} z</script><script type="math/tex; mode=display">\Delta w \approx 4\Delta x+2\Delta y-2\Delta z</script><script type="math/tex; mode=display">4\Delta x+2\Delta y-2\Delta z=0</script><script type="math/tex; mode=display">4(x-2)+2(y-1)-2(z-1)=0</script><h2 id="2-8-Directional-Derivatives-方向导数"><a href="#2-8-Directional-Derivatives-方向导数" class="headerlink" title="2.8 Directional Derivatives 方向导数"></a>2.8 Directional Derivatives 方向导数</h2><p>方向导数是梯度的一个应用。<br>方向导数是沿着某方向上的导数，例如x轴，y轴。方向导数衡量了函数沿着某方向的变化情况。  </p>
<p>在某点（x,y)开始，有一个向量u，沿着u的方向直线移动。同时有一个二元函数w(x,y)，沿着u的方向，变化有多快？<br>将直线的轨迹参数化：</p>
<script type="math/tex; mode=display">\frac{\mathrm{d} \overrightarrow{r}}{\mathrm{d} s}=\widehat{u}</script><p>这个问题实际上就是求：</p>
<script type="math/tex; mode=display">\frac{\mathrm{d} w}{\mathrm{d} s}</script><p><strong>定义</strong>：函数w沿着u方向的方向导数，不局限于坐标轴方向：   </p>
<script type="math/tex; mode=display">\left.\begin{matrix}
\frac{\mathrm{d} w}{\mathrm{d} s}
\end{matrix}\right|_ {\widehat{u}}</script><p>学习偏导数的时候我们知道，偏导数是与x轴y轴平行的线做垂面所得到的截线的斜率。相似的，方向导数是沿着方向向量的垂面截取图像，得到的截线的斜率。</p>
<p>链式法则里，就讲解过如何去求解了。现在，可视化这个问题。沿着3D图直线方向做垂面，可以得到这个垂面的截线，截线上的某点的斜率就是方向导数：<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/%E5%9B%BE%E5%BD%A2%E5%8C%96%E6%96%B9%E5%90%91%E5%AF%BC%E6%95%B0.png" alt=""></p>
<p><strong>方向导数的计算</strong><br>根据链式法则：   </p>
<script type="math/tex; mode=display">\frac{\mathrm{d} w}{\mathrm{d} s}=
\bigtriangledown w\cdot \frac{\mathrm{d}\overrightarrow{ r}}{\mathrm{d} s}</script><script type="math/tex; mode=display">\left.\begin{matrix}
\frac{\mathrm{d} w}{\mathrm{d} s}
\end{matrix}\right|_ {\widehat{u}}=
\bigtriangledown w\cdot \widehat{u}</script><p>比如说在i方向上的方向导数：  </p>
<script type="math/tex; mode=display">\left.\begin{matrix}
\frac{\mathrm{d} w}{\mathrm{d} s}
\end{matrix}\right|_ {\widehat{i}}=
\bigtriangledown w\cdot \widehat{i}=
\frac{\partial w}{\partial x}</script><p>i方向上的方向导数就是x方向的偏导数。   </p>
<p><strong>梯度向量和方向导数的关系</strong><br>已经知道</p>
<script type="math/tex; mode=display">\left.\begin{matrix}
\frac{\mathrm{d} w}{\mathrm{d} s}
\end{matrix}\right|_ {\widehat{u}}=
\bigtriangledown w\cdot \widehat{u}=
\left | \bigtriangledown w \right |\left | u \right | \cos \theta</script><p>当角度为0的时候，方向导数变化最大。所以梯度向量是在给定点处函数增加最快的向量。<br>当角度为180的时候，方向导数是负的梯度。<br>当角度为90的时候，运动方向与梯度向量垂直，相当于在等值面上运动，没有大小变化。此时与等值面相切。</p>
<h1 id="3-Lagrange-Multipliers-and-Constrained-Differentials-拉格朗日乘数法"><a href="#3-Lagrange-Multipliers-and-Constrained-Differentials-拉格朗日乘数法" class="headerlink" title="3. Lagrange Multipliers and Constrained Differentials 拉格朗日乘数法"></a>3. Lagrange Multipliers and Constrained Differentials 拉格朗日乘数法</h1><p>拉格朗日乘子(Lagrange Multipliers)</p>
<h2 id="3-1-Statement-of-Lagrange-Multipliers-and-Example"><a href="#3-1-Statement-of-Lagrange-Multipliers-and-Example" class="headerlink" title="3.1 Statement of Lagrange Multipliers and Example"></a>3.1 Statement of Lagrange Multipliers and Example</h2><p>找到函数当x,y,z是不独立时f(x,y,z)的最小值或最大值，即有约束条件g(x,y,z)=c。   </p>
<p>对于简单的约束条件，可以先把x,y,z的关系解出来，代入到原方程中。但是更加复杂的约束条件就不能这么解了。</p>
<p>先来看一个例子，找双曲线(hyperbola) xy=3 上离原点最近的点。等价的数学表达式是：</p>
<script type="math/tex; mode=display">\min f(x,y)=x^2+y^2</script><script type="math/tex; mode=display">\mathrm{s.t.} g(x,y):xy=3</script><p>可以先画出 $x^2+y^2$ 的等高线图，不同c的高线上每一个点 (x,y) 到原点的距离的平方都是常数c值。这个例子的几何意义就是在双曲线上找到距离原点最近的点。   </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/LarCon.png" alt=""></p>
<p>当最小值发生的时候，f(x,y) 的等高线和 g(x,y)=3 是相切的。</p>
<p><strong>如何把这个切点解出来？</strong><br>如果两个等高线相切，说明它们的切线相同，法向量平行。由于梯度向量和等高线垂直，最值出现的时候，也就是在切点处，f和g的梯度向量是平行的。</p>
<p>当互相平行的时候，它们是成倍数关系。这个倍数就是拉格朗日乘子，用希腊字母lambda表示。  </p>
<script type="math/tex; mode=display">\bigtriangledown f \parallel \bigtriangledown g</script><script type="math/tex; mode=display">\bigtriangledown f = \lambda\cdot\bigtriangledown g</script><blockquote>
<p>主题无关，使用lambda符号代表拉格朗日乘子，很有可能是向拉格朗日致敬，因为都以L开头</p>
</blockquote>
<p>现在要做的就是求解x,y和lambda三个未知量。</p>
<script type="math/tex; mode=display">\bigtriangledown f = \lambda\cdot\bigtriangledown g
\left\{\begin{matrix}
f_x=\lambda\cdot g_x\\
f_y=\lambda\cdot g_y
\end{matrix}\right.</script><p>再加上限制条件g，三个方程三个未知数，答案就得到了：</p>
<script type="math/tex; mode=display">\left\{\begin{matrix}
2x-\lambda y = 0 \\
\lambda x -2y = 0 \\
xy=3\\
\end{matrix}\right.\Rightarrow
\begin{bmatrix}
2 & -\lambda\\
\lambda &-2
\end{bmatrix}\cdot
\begin{bmatrix}
x\\
y
\end{bmatrix}=
\begin{bmatrix}
0\\
0
\end{bmatrix}</script><p>首先x和y都等于0并不满足限制条件，所以是一组平凡解。非平凡解要求矩阵的行列式为0。</p>
<script type="math/tex; mode=display">\begin{vmatrix}
2 & -\lambda\\
\lambda &-2
\end{vmatrix}=0</script><p>得到的值分别代入求证，找到最终解。</p>
<p>补充一点，<strong>拉格朗日乘法无法判断是最大值还是最小值，在三维空间中还有可能是鞍点。</strong>   </p>
<h2 id="3-2-Proof-of-Lagrange-Multipliers-证明"><a href="#3-2-Proof-of-Lagrange-Multipliers-证明" class="headerlink" title="3.2 Proof of Lagrange Multipliers 证明"></a>3.2 Proof of Lagrange Multipliers 证明</h2><p>一个函数在某种限制条件下的最小点或者最大点，这时，如果在g的等值面上移动，则y的值一定是增加或者减少的。而且f的一阶导数符号不会改变。</p>
<p>没有限制条件g的时候，最大值或者最小值的偏导数为0。在有限制条件的时候，偏导数只有在固定的方向上才是0，即指向g的等值面的延伸方向。</p>
<p>有限制条件的最小值或者最大值，在任何g=c的方向上，f的变化率是0。</p>
<p>从方向导数角度来看：<br>考虑任意一个与 g=c 相切的向量</p>
<script type="math/tex; mode=display">\widehat{u}</script><p>都有：</p>
<script type="math/tex; mode=display">\left.\begin{matrix}
\frac{\mathrm{d} f}{\mathrm{d} s}
\end{matrix}\right|_ {\widehat{u}}=0</script><script type="math/tex; mode=display">\bigtriangledown f \cdot \widehat{u}=0</script><script type="math/tex; mode=display">\bigtriangledown f \perp \widehat{u}</script><p>所以：</p>
<script type="math/tex; mode=display">\bigtriangledown f \perp g的等值面</script><p>由于：</p>
<script type="math/tex; mode=display">\bigtriangledown g \perp g的等值面</script><p>所以：</p>
<script type="math/tex; mode=display">\bigtriangledown f \parallel \bigtriangledown g</script><p>如图，红色向量为u，是P在g=c上的切线，f是平面的情况</p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/LarTest1.png" alt=""></p>
<p>有最大值的情况:</p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/LarTest_max.png" alt=""></p>
<p>有最小值的情况:</p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/LarTest_min.png" alt=""></p>
<p>再来看一个例子：</p>
<script type="math/tex; mode=display">\max f(x,y)=2-x^2-2y^2</script><script type="math/tex; mode=display">\mathrm{s.t.} g(x,y):x+y=1</script><p>函数图像是这样子的：   </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/LarEx1.png" alt=""></p>
<p>可行解都在限制条件g(x,y)上，如图所示为等高线图:    </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/LarEx1_2.png" alt=""></p>
<p>目标优化方程f(x,y)梯度向量:   </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/LarEx1_3.png" alt=""></p>
<p>限制条件g(x,y)梯度向量:   </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/LarEx1_4.png" alt=""></p>
<p>红圈处为最优解，梯度向量互相平行。   </p>
<blockquote>
<p>警告：如何知道是最小值还是最大值？<br>不能知道，而且不能用二次导来验证，只能带入值来求解。</p>
</blockquote>
<h2 id="3-3-Advanced-Example-复杂例子"><a href="#3-3-Advanced-Example-复杂例子" class="headerlink" title="3.3 Advanced Example 复杂例子"></a>3.3 Advanced Example 复杂例子</h2><p>当有时候函数或者约束条件复杂，拉格朗日法计算也很吃力，牢记拉格朗日法的本质，会化繁为简。   </p>
<blockquote>
<p>已知金字塔的体积，找一个表面积最小的金字塔。<br>底面三点P1(x1,y1)，P2(x2,y2)，P1(x3,y3)，要求顶点P(x,y,h)    </p>
</blockquote>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/volume-of-triangular-pyramid.jpeg" alt=""></p>
<script type="math/tex; mode=display">体积=\frac{1}{3} 底面积\cdot高</script><p>由于高是固定的，来看下金字塔的底面，u1，u2，u3分别是到a1，a2，a3三条边的距离：   </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/%E9%87%91%E5%AD%97%E5%A1%94%E5%BA%95%E9%9D%A2.png" alt=""></p>
<p>某一侧边的高是：</p>
<script type="math/tex; mode=display">h_1=\sqrt{u_1^2+h^2}</script><p>侧面的总面积 $f(u1,u2,u3)$：</p>
<script type="math/tex; mode=display">面积=\frac{1}{2}a_1\sqrt{u_1^2+h^2}+
\frac{1}{2}a_2\sqrt{u_2^2+h^2}+
\frac{1}{2}a_3\sqrt{u_3^2+h^2}</script><p>限制条件底面面积 $g(u1,u2,u3)$：</p>
<script type="math/tex; mode=display">底面面积=\frac{1}{2}a_1u_1+
\frac{1}{2}a_2u_2+
\frac{1}{2}a_3u_3</script><p>使用拉格朗日乘数法方程：</p>
<script type="math/tex; mode=display">\bigtriangledown f = \lambda\cdot\bigtriangledown g</script><script type="math/tex; mode=display">\left\{\begin{matrix}
\lambda =\frac{u_1}{\sqrt{u_1^2+h^2}}\\
\lambda =\frac{u_2}{\sqrt{u_2^2+h^2}}\\
\lambda =\frac{u_3}{\sqrt{u_3^2+h^2}}
\end{matrix}\right.</script><p>也就是</p>
<script type="math/tex; mode=display">u_1=u_2=u_3</script><p>顶点距离三条底边距离相等的时候，总面积最小。</p>
<h2 id="3-4-Constrained-Differentials-带约束条件的微分方程"><a href="#3-4-Constrained-Differentials-带约束条件的微分方程" class="headerlink" title="3.4 Constrained Differentials 带约束条件的微分方程"></a>3.4 Constrained Differentials 带约束条件的微分方程</h2><p>带约束条件的方程意味着方程有非独立变量(Non-independent variables)，即g(x,y,z)=c。</p>
<p>有函数</p>
<script type="math/tex; mode=display">f(x,y,z)</script><p>变量之间的关系为</p>
<script type="math/tex; mode=display">g(x,y,z)=c</script><p>从偏微分的角度来看看约束条件。<br>已知：</p>
<script type="math/tex; mode=display">x^2+yz+z^3=8</script><p>对方程微分：</p>
<script type="math/tex; mode=display">2x\mathrm{d}x+z\mathrm{d}y+(y+3z^3)\mathrm{d}z=0</script><p>在(2,3,1)这一点上有：</p>
<script type="math/tex; mode=display">4\mathrm{d}x+\mathrm{d}y+6\mathrm{d}z=0</script><p>这个方程反映了 $x，y，z$ 在 $(2,3,1)$ 这一点上发生变化的关系。它告诉我们诸如此类的一些问题，当 $x，y$ 变化时，z如何变化。在等值面上，变化量之间有什么关系。如果将z看作是 $x，y$ 的函数 $z=z(x,y)$，可以得到 $z$ 关于 $x，y$ 的全微分，全微分符号前边部分为偏微分。     </p>
<script type="math/tex; mode=display">\mathrm{d}z=-\frac{1}{6}(4\mathrm{d}x+\mathrm{d}y)</script><script type="math/tex; mode=display">\frac{\partial{z}}{\partial{x}}=-\frac{2}{3}</script><script type="math/tex; mode=display">\frac{\partial{z}}{\partial{y}}=-\frac{1}{6}</script><p>当考虑x对z的偏微分的时候，会假定y恒定，$\mathrm{d}y=0$；同理，y对z的偏微分会假定x恒定，$\mathrm{d}x=0$。   </p>
<p>好了，通常来说：</p>
<script type="math/tex; mode=display">g(x,y,z)=c</script><script type="math/tex; mode=display">\mathrm{d}g=g_x\mathrm{d}x+g_y\mathrm{d}y+g_z\mathrm{d}z=0</script><p>现在就可以用任意两个变量表示第三个：</p>
<script type="math/tex; mode=display">\mathrm{d}z=-\frac{g_x}{g_z}\mathrm{d}x-\frac{g_y}{g_z}\mathrm{d}y</script><p>由于微分符号前边的系数可以把它考虑成偏微分，则有</p>
<script type="math/tex; mode=display">\frac{\mathrm{d}z}{\mathrm{d}x}=-\frac{g_x}{g_z}</script><blockquote>
<p>注意一个违反直觉的地方：负号出现了。</p>
</blockquote>
<p>这就是求约束变量之间变化率的通用方法。</p>
<h2 id="3-5-Clearer-Notation-说明符号"><a href="#3-5-Clearer-Notation-说明符号" class="headerlink" title="3.5 Clearer Notation 说明符号"></a>3.5 Clearer Notation 说明符号</h2><p>一个有趣的函数：</p>
<script type="math/tex; mode=display">f(x,y)=x+y</script><script type="math/tex; mode=display">x=u</script><script type="math/tex; mode=display">y=u+v</script><p>分别求偏导数：</p>
<script type="math/tex; mode=display">\frac{\partial{f}}{\partial{x}}=1</script><script type="math/tex; mode=display">\frac{\partial{f}}{\partial{u}}=2</script><p>虽然x=u，但是对f的偏导数却是不相同的。f对于x的偏微分，要求y保持恒定，f对于u的偏微分要求v保持恒定。虽然x=y，但是y和v是不相同的。所以，很重要的一点是要明确哪个变量是维持恒定的。这里使用一种说明符号，注意这里不再表示偏微分，而是表示恒定量：</p>
<script type="math/tex; mode=display">\left ( \frac{\partial f}{\partial x} \right )_ y</script><p>用新的表示法解决之前冲突的地方：</p>
<script type="math/tex; mode=display">\left ( \frac{\partial f}{\partial x} \right )_ y \neq
\left ( \frac{\partial f}{\partial x} \right )_ v =
\left ( \frac{\partial f}{\partial u} \right )_ v</script><p>在处理关联变量的时候，这一点尤其重要。</p>
<h2 id="3-5-Example-关于非独立变量的例子"><a href="#3-5-Example-关于非独立变量的例子" class="headerlink" title="3.5 Example 关于非独立变量的例子"></a>3.5 Example 关于非独立变量的例子</h2><p>一个几何学的例子，三角形面积。   </p>
<p>假设有一个三角形，变量是两条边 $a$ 和 $b$, 这两条边的夹角是$theta$。 有一个限制条件，三角形是直角三角形，$a$ 和 $b$ 分别是直角边和斜边。求三角形面积对角度的变化情况。</p>
<p>考虑三种情况：<br><strong>第一种情况：</strong> a, b 恒定，只改变角度，即没有直角三角形作为约束，$a,b,\theta$ 是独立的：   </p>
<script type="math/tex; mode=display">\left ( \frac{\partial A}{\partial \theta} \right )_ {a,b}=
\frac{1}{2}ab\cos{\theta}</script><p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/triangleABconstant.gif" alt=""></p>
<p><strong>第二种情况：</strong> 保持a恒定不变，$b$ 成为 $a$ 和 $\theta$ 的函数。  </p>
<script type="math/tex; mode=display">b=\frac{a}{\cos{\theta}}</script><script type="math/tex; mode=display">\left ( \frac{\partial A}{\partial \theta} \right )_ {a}=
\frac{1}{2}a^2\sec^2{\theta}</script><p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/triangleAconstant.gif" alt=""></p>
<p><strong>第三种情况：</strong> 保持b恒定不变，$a$ 成为 $b$ 和 $\theta$ 的函数。</p>
<script type="math/tex; mode=display">a=b\cos{\theta}</script><script type="math/tex; mode=display">\left ( \frac{\partial A}{\partial \theta} \right )_ {b}=
\frac{1}{2}b^2\sin{\theta}\cos{\theta}</script><p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BA%8C%EF%BC%9A%E5%81%8F%E5%BE%AE%E5%88%86-%E7%AC%94%E8%AE%B0/triangleBconstant.gif" alt=""></p>
<blockquote>
<p>存在非独立变量的时候，要消去这些非独立变量。作图的时候遇到了问题，使用独立变量问题解决。</p>
</blockquote>
<p>接下来看看如何解偏微分。</p>
<script type="math/tex; mode=display">\left ( \frac{\partial A}{\partial \theta} \right )_ {a} ?</script><p><strong>方法0：</strong> 将约束条件代入，消去因变量，再求导。</p>
<p>系统的方法：</p>
<p><strong>方法1：微分</strong>   </p>
<ul>
<li>对目标函数进行微分。</li>
<li>对约束条件进行微分。</li>
<li>使恒定不变量微分为0，化简整理，得到答案。<script type="math/tex; mode=display">A=\frac{1}{2}ab\sin{\theta}\Rightarrow \\
dA=\frac{1}{2}b\sin{\theta}\mathrm{d}a+\frac{1}{2}a\sin{\theta}\mathrm{d}b+\frac{1}{2}ab\cos{\theta}\mathrm{d}\theta</script><script type="math/tex; mode=display">a=b\cos{\theta}\Rightarrow \\
\mathrm{d}a=\cos{\theta}\mathrm{d}b-b\sin{\theta}\mathrm{d}\theta</script><script type="math/tex; mode=display">\mathrm{d}a=0\Rightarrow \\
\left ( \frac{\partial A}{\partial \theta} \right )_ {a}=\frac{1}{2}ab\sec{\theta}</script></li>
</ul>
<p><strong>方法2：链式法则</strong>    </p>
<script type="math/tex; mode=display">\left ( \frac{\partial A}{\partial \theta} \right )_ {a} =
A_{\theta}\left (  \frac{\partial{\theta}}{\partial{\theta}} \right )_ {a}+
A_{a}\left (  \frac{\partial{a}}{\partial{\theta}} \right )_ {a}+
A_{b}\left ( \frac{\partial{b}}{\partial{\theta}} \right )_ {a}</script><p>第一项分数可约分，只剩下不考虑约束条件的偏微分；第二项为0；第三项需要约束条件解得偏微分的比值，得到最终结果。这是含有非独立变量的链式法则。两种方法可以加深理解。     </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Functions-of-Two-Variables-Tangent-Approximation-and-Optimization&quot;&gt;&lt;a href=&quot;#1-Functions-of-Two-Variables-Tangent-Approximation-and-Optimization&quot; class=&quot;headerlink&quot; title=&quot;1. Functions of Two Variables, Tangent Approximation and Optimization&quot;&gt;&lt;/a&gt;1. Functions of Two Variables, Tangent Approximation and Optimization&lt;/h1&gt;&lt;h2 id=&quot;1-1-Functions-of-Two-Variables-Graphs-二元函数：图&quot;&gt;&lt;a href=&quot;#1-1-Functions-of-Two-Variables-Graphs-二元函数：图&quot; class=&quot;headerlink&quot; title=&quot;1.1 Functions of Two Variables: Graphs 二元函数：图&quot;&gt;&lt;/a&gt;1.1 Functions of Two Variables: Graphs 二元函数：图&lt;/h2&gt;&lt;p&gt;有没有试着去画一个二元函数的图，比起一元函数来，画二元函数的图简直就是灾难。   &lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x,y)&lt;/script&gt;&lt;p&gt;如何直观的表示一个二元函数的图，一个很好的列子就是等高线图：   &lt;/p&gt;
    
    </summary>
    
      <category term="苦境" scheme="http://ihozh.com/categories/%E8%8B%A6%E5%A2%83/"/>
    
    
      <category term="微积分" scheme="http://ihozh.com/tags/%E5%BE%AE%E7%A7%AF%E5%88%86/"/>
    
      <category term="公开课" scheme="http://ihozh.com/tags/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
      <category term="18.02" scheme="http://ihozh.com/tags/18-02/"/>
    
      <category term="工程数学" scheme="http://ihozh.com/tags/%E5%B7%A5%E7%A8%8B%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>MIT多元微积分一：向量和矩阵 笔记</title>
    <link href="http://ihozh.com/2017/05/15/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%80%EF%BC%9A%E5%90%91%E9%87%8F%E5%92%8C%E7%9F%A9%E9%98%B5-%E7%AC%94%E8%AE%B0/"/>
    <id>http://ihozh.com/2017/05/15/MIT多元微积分一：向量和矩阵-笔记/</id>
    <published>2017-05-15T20:51:16.000Z</published>
    <updated>2017-05-23T06:52:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Vectors-Determinations-and-Planes-向量，行列式和平面"><a href="#1-Vectors-Determinations-and-Planes-向量，行列式和平面" class="headerlink" title="1. Vectors, Determinations and Planes 向量，行列式和平面"></a>1. Vectors, Determinations and Planes 向量，行列式和平面</h1><h2 id="1-1-基础"><a href="#1-1-基础" class="headerlink" title="1.1 基础"></a>1.1 基础</h2><p>向量是一个既有大小又有方向的量。with both direction and magnitude/length。通过带箭头的直线将向量直观的表示出来。引入空间直角坐标系和单位向量是向量间计算的基础。   </p>
<p>Pythagorean theory 毕达哥拉斯定理，勾股定理   </p>
<p><strong>计算向量的长度</strong> $\left | \overrightarrow{a} \right |$，多维向量还是通过勾股定理计算。   </p>
<p><strong>向量的加法</strong>    </p>
<script type="math/tex; mode=display">\overrightarrow{A}+\overrightarrow{B}=\left \langle a_{1}+b_{1},a_{2}+b_{2} \right \rangle</script><p>向量是头尾加法，同一方向可以进行标量加法。    </p>
<a id="more"></a>
<h2 id="1-2-Dot-Products点积"><a href="#1-2-Dot-Products点积" class="headerlink" title="1.2 Dot Products点积"></a>1.2 Dot Products点积</h2><p>两个向量相乘，结果是标量。几何意义是计算两个向量的夹角，以及在某一方向上的投影。   </p>
<p><strong>定义：</strong>    </p>
<script type="math/tex; mode=display">\overrightarrow{A}\cdot \overrightarrow{B}=\sum_{a_i,b_i}=a_{1}b_{1}+a_{2}b_{2}</script><p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%80%EF%BC%9A%E5%90%91%E9%87%8F%E5%92%8C%E7%9F%A9%E9%98%B5-%E7%AC%94%E8%AE%B0/vector.png" alt="dot product 向量点乘">   </p>
<p>点积的几何意义：$\overrightarrow{a}\cdot \overrightarrow{b}=\left | a \right |\left | b \right |\cos(\theta)$   </p>
<p><strong>证明：</strong>    </p>
<script type="math/tex; mode=display">\overrightarrow{c}=\overrightarrow{a}-\overrightarrow{b}</script><script type="math/tex; mode=display">\overrightarrow{c}\cdot \overrightarrow{c}=(\overrightarrow{a}-\overrightarrow{b})\cdot (\overrightarrow{a}-\overrightarrow{b})={\left | a \right |}^{2}+{\left | b \right |}^{2}-2\overrightarrow{a}\cdot \overrightarrow{b}</script><p>根据余弦定理：   </p>
<script type="math/tex; mode=display">\overrightarrow{c}\cdot \overrightarrow{c}={\left | c \right |}^2={\left | a \right |}^{2}+{\left | b \right |}^{2}-2\left | a \right |\left | b \right |\cos(\theta )</script><p>所以：  </p>
<script type="math/tex; mode=display">\overrightarrow{a}\cdot \overrightarrow{b}=\left | a \right |\left | b \right |\cos(\theta)</script><h2 id="1-3-点积的应用"><a href="#1-3-点积的应用" class="headerlink" title="1.3 点积的应用"></a>1.3 点积的应用</h2><ul>
<li>计算长度和角度<br>计算向量的角度的时候，先算出来的是cos，有趣的是cos的符号   <ul>
<li>sign&gt;0，锐角   </li>
<li>sign&lt;0，钝角   </li>
<li>sign=0，直角   </li>
</ul>
</li>
<li>检测正交<br>$x+2y+3z=0$ 的点集是什么形状?  平面    </li>
</ul>
<script type="math/tex; mode=display">\overrightarrow{A}=\left \langle 1,2,3 \right \rangle</script><script type="math/tex; mode=display">\overrightarrow{P}=\left \langle x,y,z \right \rangle</script><script type="math/tex; mode=display">\overrightarrow{A}\cdot \overrightarrow{OP}=0</script><script type="math/tex; mode=display">\overrightarrow{A}\perp \overrightarrow{OP}</script><ul>
<li>向量沿一个方向的成分，单位向量<ul>
<li>计算悬挂摆，分解力</li>
</ul>
</li>
</ul>
<h2 id="1-4-Determinations-行列式"><a href="#1-4-Determinations-行列式" class="headerlink" title="1.4 Determinations 行列式"></a>1.4 Determinations 行列式</h2><blockquote>
<p>如何计算几个向量围成的面积?<br>三角形的面积怎么计算？</p>
</blockquote>
<script type="math/tex; mode=display">Area=\frac{1}{2}\left | a \right |\left | b \right |\sin{\theta }</script><p>奇妙的是，这和底乘高的得到结果一样。<br>再算出余弦，带入，会很麻烦。   </p>
<blockquote>
<p>下面的内容会非常有趣</p>
</blockquote>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%80%EF%BC%9A%E5%90%91%E9%87%8F%E5%92%8C%E7%9F%A9%E9%98%B5-%E7%AC%94%E8%AE%B0/det.png" alt="determination 行列式">   </p>
<p>考虑两个向量，$\overrightarrow{a}$ 和差90度的向量 $\overrightarrow{a’}$    </p>
<script type="math/tex; mode=display">Area=\frac{1}{2}\left | a \right |\left | b \right |\sin{\theta }</script><script type="math/tex; mode=display">\sin{\theta}=\cos{\theta'}</script><script type="math/tex; mode=display">Area=\frac{1}{2}\overrightarrow{a'}\cdot \overrightarrow{b}</script><script type="math/tex; mode=display">\overrightarrow{a'}=\left \langle -a_2,a_1 \right \rangle</script><script type="math/tex; mode=display">\overrightarrow{a'}\cdot \overrightarrow{b}=\left \langle -a_2,a_1 \right \rangle \cdot \left \langle b_1,b_2 \right \rangle=a_1b_2-a_2b_1</script><script type="math/tex; mode=display">=\begin{vmatrix}
a_1&a_2\\
b_1&b_2
\end{vmatrix}=\det(a,b)</script><p>发现行列式代数上是余向量的点积，几何上行列式的绝对值是向量所围成的面积。<br>Area=abs value of det.</p>
<h2 id="1-5-空间行列式"><a href="#1-5-空间行列式" class="headerlink" title="1.5 空间行列式"></a>1.5 空间行列式</h2><p>高维行列式计算方法，扩展：奇正偶负。正负是因为改变了空间的方向。更复杂的内容会在18.06讲解。</p>
<script type="math/tex; mode=display">\begin{vmatrix}
 a_1&  a_2& a_3\\
 b_1&  b_2& b_3\\
 c_1&  c_2& c_3\\
\end{vmatrix}=a_1
\begin{vmatrix}
 b_2& b_3\\
 c_2& c_3\\
\end{vmatrix}-a_2
\begin{vmatrix}
 b_1& b_3\\
 c_1& c_3\\
\end{vmatrix}+a_3
\begin{vmatrix}
 b_1& b_2\\
 c_1& c_2\\
\end{vmatrix}</script><p>几何学上，三维行列式就是长方体体积的加减。</p>
<h2 id="1-6-Cross-product-叉乘"><a href="#1-6-Cross-product-叉乘" class="headerlink" title="1.6 Cross product 叉乘"></a>1.6 Cross product 叉乘</h2><p>三纬空间的两个向量<br>定义:   </p>
<script type="math/tex; mode=display">\overrightarrow{A}\times \overrightarrow{B}  =\begin{vmatrix}
\widehat{i}& \widehat{j}& \widehat{k}\\
 a_1&  a_2& a_3\\
 b_1&  b_2& b_3
\end{vmatrix}</script><p>叉乘的结果是个向量。   </p>
<ul>
<li>$\left |\overrightarrow{A}\times \overrightarrow{B}  \right |$ = 向量围成平行四边形的面积。</li>
<li>$dir(\overrightarrow{A}\times \overrightarrow{B})$ 垂直于两向量所在平面</li>
<li>向量方向的判断的方式为右手法则   <ul>
<li>右手指向向量A的方向</li>
<li>手指指向向量B的方向</li>
<li>竖起大拇指，拇指方向为叉乘方向   </li>
</ul>
</li>
</ul>
<p>例子：<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%80%EF%BC%9A%E5%90%91%E9%87%8F%E5%92%8C%E7%9F%A9%E9%98%B5-%E7%AC%94%E8%AE%B0/right-hand%20rule.png?imageMogr2/auto-orient/thumbnail/200x200&gt;/blur/1x0/quality/75|imageslim" alt="右手法则"></p>
<script type="math/tex; mode=display">\widehat{i}\times \widehat{j}=
\begin{vmatrix}
 \widehat{i}& \widehat{j}& \widehat{k} \\
 1& 0& 0 \\
 0& 1& 0
\end{vmatrix}
=0\widehat{i}-0\widehat{j}+1\widehat{k}</script><p><strong>关于空间体积的一些观点</strong><br>前面说到三维行列式的几何学意义就是体积。   </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%80%EF%BC%9A%E5%90%91%E9%87%8F%E5%92%8C%E7%9F%A9%E9%98%B5-%E7%AC%94%E8%AE%B0/volume.png" alt="volume">  </p>
<script type="math/tex; mode=display">Volume=base(area)\cdot height=\left | \overrightarrow{B}\times \overrightarrow{C} \right |(\overrightarrow{A}\cdot \overrightarrow{n})</script><script type="math/tex; mode=display">\overrightarrow{n}=\frac{\overrightarrow{B}\times \overrightarrow{C}}{\left | \overrightarrow{B}\times \overrightarrow{C} \right |}</script><script type="math/tex; mode=display">Volume=\overrightarrow{A}\cdot (\overrightarrow{B}\times \overrightarrow{C})=\det(\overrightarrow{A},\overrightarrow{B},\overrightarrow{C})</script><p><strong>补充</strong><br>$\overrightarrow{A}\times \overrightarrow{B}$ 和  $\overrightarrow{B}\times \overrightarrow{A}$ 由于方向的原因，是完全相反的。<br>$\overrightarrow{A}\times \overrightarrow{A}=0$</p>
<h2 id="1-7-Equations-of-planes-平面的方程"><a href="#1-7-Equations-of-planes-平面的方程" class="headerlink" title="1.7 Equations of planes 平面的方程"></a>1.7 Equations of planes 平面的方程</h2><p>这一节主要讲的是叉乘的应用。   </p>
<blockquote>
<p>如何已知三点构成的平面，和另外一个点P，如何确定点P在这个平面上。   </p>
</blockquote>
<p>一个方法是：</p>
<script type="math/tex; mode=display">\det(\overrightarrow{P_1P},\overrightarrow{P_1P_2},\overrightarrow{P_1P_3})=0</script><p>带入 $P(x,y,z)$ 就得到平面的方程。    </p>
<p>另一个方法：如果P在平面上则可以推出   </p>
<script type="math/tex; mode=display">\overrightarrow{P_1P}\perp \overrightarrow{n}</script><p>$\overrightarrow{n}$ 是平面法向量（normal vector）。<br>最后得到了一个我们很熟悉的公式，也是计算体积的公式：</p>
<script type="math/tex; mode=display">\overrightarrow{P_1P}\cdot (\overrightarrow{P_1P_2} \times \overrightarrow{P_1P_3})=0</script><p>这个形式在向量计算中有个别名，叫做三重积（Triple product），和行列式是一回事。</p>
<h1 id="2-Matrices-and-Systems-of-Equations-矩阵和系统方程"><a href="#2-Matrices-and-Systems-of-Equations-矩阵和系统方程" class="headerlink" title="2. Matrices and Systems of Equations 矩阵和系统方程"></a>2. Matrices and Systems of Equations 矩阵和系统方程</h1><blockquote>
<p>为什么要使用矩阵，使用矩阵的动机是什么</p>
</blockquote>
<p>在生活中，我们接触的很多东西都是线性的，或者需要简化成线性的。多个等式的联立得到的就是矩阵了。联立方程就是矩阵乘法。</p>
<h2 id="2-1-Matrix-Multiplication-矩阵乘法"><a href="#2-1-Matrix-Multiplication-矩阵乘法" class="headerlink" title="2.1 Matrix Multiplication 矩阵乘法"></a>2.1 Matrix Multiplication 矩阵乘法</h2><blockquote>
<p>举个熟悉的鸡兔同笼的问题. 鸡和兔共有 $a$只，共有脚 $b$ 个，用矩阵去表达这个问题。</p>
</blockquote>
<p>假设有鸡$x$只，兔$y$只</p>
<script type="math/tex; mode=display">\left\{\begin{matrix}
x+y=a\\
2x+4y=b
\end{matrix}\right.</script><p>用矩阵乘法表示：   </p>
<script type="math/tex; mode=display">\begin{bmatrix}
 1& 1\\
 2& 4
\end{bmatrix}
\begin{bmatrix}
 x\\
 y
\end{bmatrix}=
\begin{bmatrix}
 a\\
 b
\end{bmatrix}</script><p>通用的数学符号表达方式为：</p>
<script type="math/tex; mode=display">A\cdot X=U</script><p>在矩阵和向量中的每一个值都叫做元素（entries）<br>在计算矩阵乘法 $A\cdot B$ 时，每个元素都可以通过A矩阵的行和B矩阵的列做点乘得到。<strong>A矩阵的宽度必须要等于B矩阵的高度</strong>。</p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%80%EF%BC%9A%E5%90%91%E9%87%8F%E5%92%8C%E7%9F%A9%E9%98%B5-%E7%AC%94%E8%AE%B0/Matrix_multiplication_diagram.png" alt="矩阵乘法示意图"></p>
<p>AB的乘积代表先做变换B再做变换A。我们习惯从左往右，但是矩阵计算是从右往左。直观的解释就是如果有两个连续的方程 $f(g(x))$ ，先要计算 $g(x)$, 再做 $f(x)$。   </p>
<p><strong>矩阵的结合律（associativity）</strong></p>
<script type="math/tex; mode=display">(AB)X=A(BX)</script><p><strong>补充</strong></p>
<script type="math/tex; mode=display">AB \neq BA</script><p><strong>Identity matrix 单位矩阵</strong></p>
<script type="math/tex; mode=display">IX=X</script><p>单位矩阵即对角全为一的矩阵。是一种“可有可无”的矩阵，单位矩阵的变换叫做恒等变换。</p>
<blockquote>
<p>在平面上，做90度逆时针旋转的变换</p>
</blockquote>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%80%EF%BC%9A%E5%90%91%E9%87%8F%E5%92%8C%E7%9F%A9%E9%98%B5-%E7%AC%94%E8%AE%B0/%E6%97%8B%E8%BD%AC90%E5%BA%A6.png" alt="旋转90度"></p>
<script type="math/tex; mode=display">R=\begin{bmatrix}
 0& -1\\
 1& 0
\end{bmatrix}</script><script type="math/tex; mode=display">R\hat{i}=
\begin{bmatrix}
 0& -1\\
 1& 0
\end{bmatrix}
\begin{bmatrix}
 1\\
 0
\end{bmatrix}=
\begin{bmatrix}
 0\\
 1
\end{bmatrix}=\hat{j}</script><script type="math/tex; mode=display">R\hat{j}=
\begin{bmatrix}
 0& -1\\
 1& 0
\end{bmatrix}
\begin{bmatrix}
 0\\
 1
\end{bmatrix}=
\begin{bmatrix}
 -1\\
 0
\end{bmatrix}=-\hat{i}</script><script type="math/tex; mode=display">(x,y)\rightarrow (-y,x)</script><p>变换矩阵的每一列说明了对要变换的对象进行什么操作。<br>R的第一列就是对第一个基向量做R变换的结果，第二列是对第二个基向量做R变换后的结果。</p>
<p>最有意思的是，通过矩阵计算大大简化了需要用公式计算的计算量，如果考虑连续做两次90度逆时针变换：</p>
<script type="math/tex; mode=display">R^2=\begin{bmatrix}
 -1& 0\\
 0& -1
\end{bmatrix}=-I</script><script type="math/tex; mode=display">(x,y)\rightarrow (-x,-y)</script><script type="math/tex; mode=display">R^4=\begin{bmatrix}
 1& 0\\
 0& 1
\end{bmatrix}=I</script><h2 id="2-2-Matrix-Inverses-逆矩阵"><a href="#2-2-Matrix-Inverses-逆矩阵" class="headerlink" title="2.2 Matrix Inverses 逆矩阵"></a>2.2 Matrix Inverses 逆矩阵</h2><p>如果定义A的逆矩阵为M，则有</p>
<script type="math/tex; mode=display">AM=I</script><script type="math/tex; mode=display">MA=I</script><script type="math/tex; mode=display">M=A^{-1}</script><p>这里A需要是 $n\times n$的方阵，如果不是方阵的情况不在这里讨论。</p>
<p>对线性系统 $AX=B$ 的解可以使用逆矩阵。等式两边同时乘A的逆矩阵</p>
<script type="math/tex; mode=display">X=A^{-1}B</script><p><strong>公式（适合小矩阵）</strong></p>
<script type="math/tex; mode=display">A^{-1}=\frac{1}{det(A)}adj(A)</script><p>adj（adjoint）是 <strong>伴随矩阵</strong></p>
<p><strong>步骤（3*3矩阵)</strong>   </p>
<script type="math/tex; mode=display">A=\begin{bmatrix}
 2& 2& 2\\
 2& 4& 5\\
 1& 1& 2
\end{bmatrix}</script><p>1.首先要做的是，是找一个叫 <strong>余子式（minors）</strong> 的东西。   </p>
<p>余子式是去除了一些元素的行列式。要找到A矩阵一行一列的余子式，去掉这个元素所在的行和列，计算剩余部分的行列式，即</p>
<script type="math/tex; mode=display">\begin{vmatrix}
 X& X& X\\
 X& 4& 5\\
 X& 1& 2
\end{vmatrix}=
\begin{vmatrix}
 4& 5\\
 1& 2
\end{vmatrix}=3</script><p>得到矩阵A的余子式：</p>
<script type="math/tex; mode=display">\begin{pmatrix}
 3& -1& -2\\
 3&  1& -1\\
 3&  4& 2
\end{pmatrix}</script><p>2.找到另外一个矩阵，叫做 <strong>代数余子式（cofactors)</strong><br>代数余子式就是给余子式加上符号。根据棋盘图所示，+表示保留余子式值，-表示反转余子式的值。顺便一提，棋盘法可以同样用来做叉乘的符号判定。</p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%80%EF%BC%9A%E5%90%91%E9%87%8F%E5%92%8C%E7%9F%A9%E9%98%B5-%E7%AC%94%E8%AE%B0/%E6%A3%8B%E7%9B%98%E5%9B%BE.png" alt="棋盘图"></p>
<p>得到代数余子式：</p>
<script type="math/tex; mode=display">\begin{pmatrix}
  3&  1& -2\\
 -3&  1& 1\\
  3& -4& 2
\end{pmatrix}</script><p>3.<strong>转置（transpose）</strong>，得到伴随矩阵<br>行列互换</p>
<script type="math/tex; mode=display">\begin{pmatrix}
  3&  -3& 3\\
  1&  1& -4\\
  -2& 1& 2
\end{pmatrix}=adj(A)</script><p>4.除以行列式</p>
<script type="math/tex; mode=display">A^{-1}=\frac{1}{3}\begin{pmatrix}
  3&  -3& 3\\
  1&  1& -4\\
  -2& 1& 2
\end{pmatrix}</script><h2 id="2-3-Equations-of-planes-平面的方程再探"><a href="#2-3-Equations-of-planes-平面的方程再探" class="headerlink" title="2.3 Equations of planes 平面的方程再探"></a>2.3 Equations of planes 平面的方程再探</h2><p>之前学习点积的时候就知道如何去检测正交或者垂直。平面的公式是：</p>
<script type="math/tex; mode=display">ax+by+cz=d</script><p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%80%EF%BC%9A%E5%90%91%E9%87%8F%E5%92%8C%E7%9F%A9%E9%98%B5-%E7%AC%94%E8%AE%B0/%E5%B9%B3%E9%9D%A2%E6%96%B9%E7%A8%8B.png" alt="平面方程"></p>
<p>第一种情况，平面过原点，知道法向量 $\overrightarrow{N}=\left \langle 1,5,10 \right \rangle$ , 对于在平面上的点 $P(x,y,z)$ , 有：</p>
<script type="math/tex; mode=display">\overrightarrow{OP}\cdot \overrightarrow{N}=0</script><script type="math/tex; mode=display">x+5y+10z=0</script><p>第二种情况，同样的法向量，平面过 $P0(2,1,-1)$    </p>
<script type="math/tex; mode=display">\overrightarrow{P_0P}\cdot \overrightarrow{N}=0</script><script type="math/tex; mode=display">x+5y+10z=-3</script><p>总结下两种情况下的特点：</p>
<ul>
<li>不同情况等式右边常数项不同</li>
<li>常数项是平面的平移距离的一个表示</li>
<li>等式左边的系数刚好和法向量对应</li>
</ul>
<p>一个有意思的事情是，这里又和叉乘联系起来了。<strong>平面方程的系数就是法向量，如何得到法向量呢？叉乘。</strong> 点乘，平面，叉乘就这么在一起了。</p>
<p>举个例子：</p>
<p>向量 $\overrightarrow{v}=\left \langle 1,2,-1 \right \rangle$ 和平面方程 $x+y+3z=5$ 是什么关系？   </p>
<p>快速确定平面方程的法向量，发现和已知向量不成比例，但是点积为0，说明向量垂直于法向量，所以和平面是平行的。如果把平面移到原点，如果向量和平面平行，向量的末端就在被移动到原点的平面上。    </p>
<h2 id="2-4-Linear-Systems-and-Planes-线性系统和平面"><a href="#2-4-Linear-Systems-and-Planes-线性系统和平面" class="headerlink" title="2.4 Linear Systems and Planes 线性系统和平面"></a>2.4 Linear Systems and Planes 线性系统和平面</h2><p>线性方程组的几何意义。<br>线性方程组，对于三纬空间来说（3*3线性方程组），方程组的每一个方程决定一个平面。解方程组的本质就是找平面的交点。<br>一般会有这三种情况：<br>三条交线交于一点：有唯一解</p>
<script type="math/tex; mode=display">X=A^{-1}B</script><p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%80%EF%BC%9A%E5%90%91%E9%87%8F%E5%92%8C%E7%9F%A9%E9%98%B5-%E7%AC%94%E8%AE%B0/%E5%B9%B3%E9%9D%A2%E4%BA%A4%E7%82%B9.png" alt="三面交于一点"></p>
<p>平面交线平行：没有解，条件矛盾，无法同时满足<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%80%EF%BC%9A%E5%90%91%E9%87%8F%E5%92%8C%E7%9F%A9%E9%98%B5-%E7%AC%94%E8%AE%B0/%E5%B9%B3%E9%9D%A2%E4%BA%A4%E7%BA%BF%E5%B9%B3%E8%A1%8C.png" alt="交线平行"></p>
<p>平面交线重叠：有无数解，条件不足</p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%80%EF%BC%9A%E5%90%91%E9%87%8F%E5%92%8C%E7%9F%A9%E9%98%B5-%E7%AC%94%E8%AE%B0/%E4%B8%89%E9%9D%A2%E5%85%B1%E7%BA%BF.png" alt="交线重叠"></p>
<p>讨论下平面方程关于常数项d，d的数值并不是平移的距离，常数项除以法向量的长度才是平面到原点的距离。   </p>
<p>将这个问题回归到从代数上，矩阵不一定能够求逆是因为行列式有可能为0（矩阵的求逆公式）。所以，矩阵的行列式不为0，矩阵可求逆，方程组有解。  </p>
<p>行列式不为0是三个平面有唯一交点的情况，行列式为0是交线平行的情况。</p>
<h2 id="2-5-Solutions-to-Square-Systems-方阵系统的解"><a href="#2-5-Solutions-to-Square-Systems-方阵系统的解" class="headerlink" title="2.5 Solutions to Square Systems 方阵系统的解"></a>2.5 Solutions to Square Systems 方阵系统的解</h2><p>这一节从另一个角度去认识行列式为0，为什么方程会没有解。</p>
<p>有一种方程组叫做 <strong>齐次方程组(homogeneous systems)</strong>, 特点是常数项全部为0。方程组各项次数整齐，在数乘运算下不变。    </p>
<script type="math/tex; mode=display">AX=0</script><p>齐次方程总是存在一个平凡解(trivial solution)，即原点。几何学表示三个平面都过原点。   </p>
<p>第一种情况，A的行列式不为0</p>
<script type="math/tex; mode=display">AX=0\Leftrightarrow X=A^{-1}0=0</script><p>原点是唯一解。   </p>
<p>第二种情况，A的行列式为0<br>我们知道A中的项是方程组的系数，而方程组的系数又是平面的法向量。行列式为0，说明三个平面的法向量的行列式为0:</p>
<script type="math/tex; mode=display">\det(\overrightarrow{N_1},\overrightarrow{N_2},\overrightarrow{N_3})=0</script><p>这就意味着三个法向量共面（coplanar）（参考上一章）。用这三个法向量围成了一个不占任何体积的平行六面体。   </p>
<p>证明有无穷多解：<br>存在一条垂直于三个法向量所在平面且过原点的直线，平行于三个平面，而且现在面上，所以存在无穷多解。</p>
<p>如何求出这些解：<br>对法向量做叉乘，这就是方程的非平凡解（nontrivial solution）</p>
<hr>
<p>如果是一般情况，系统不再是齐次方程。</p>
<script type="math/tex; mode=display">AX=B</script><p>if $\det(A) \neq 0$</p>
<script type="math/tex; mode=display">AX=B\Leftrightarrow X=A^{-1}B</script><p>if $\det(A) = 0$ 无解或无穷多解</p>
<h1 id="3-Parametric-Equations-for-Curves-直线和曲线的参数方程"><a href="#3-Parametric-Equations-for-Curves-直线和曲线的参数方程" class="headerlink" title="3. Parametric Equations for Curves  直线和曲线的参数方程"></a>3. Parametric Equations for Curves  直线和曲线的参数方程</h1><h2 id="3-1-Equations-of-Lines-直线的方程"><a href="#3-1-Equations-of-Lines-直线的方程" class="headerlink" title="3.1  Equations of Lines 直线的方程"></a>3.1  Equations of Lines 直线的方程</h2><p>直线，可以用两个平面的交集表示，但这种方法并不高效率。更好的办法是 <strong>把直线当作运动点的轨迹</strong>。轨迹就是 <strong>参数方程</strong>。</p>
<p>例：确定经过点 $Q0=(-1,2,2)$ 和 $Q1=(1,3,-1)$ 的直线。<br>定义Q(t)是一个移动点，在t=0时刻，在Q0点。在直线上做匀速运动，在单位时间内，到达点Q1。直线的方程问题就转化为当时刻为t的时候，点Q(t)在什么位置？   </p>
<script type="math/tex; mode=display">\overrightarrow{Q_0Q(t)}=t\overrightarrow{Q_0Q_1}</script><p>分别以x(t),y(t),z(t)表示Q(t)的坐标，可以得到直线的参数方程：</p>
<script type="math/tex; mode=display">\left\{\begin{matrix}
x(t)=-1+2t\\
y(t)=2+t\\
z(t)=2-3t
\end{matrix}\right.</script><p>等价于：</p>
<script type="math/tex; mode=display">Q(t)=Q_0+t\overrightarrow{Q_0Q_1}</script><p>常数项（-1，2，2）是t0时刻的位置，一次项（2，1，-3）就是向量P0P1，告诉了点应该移动的方向。</p>
<h2 id="3-2-Intersection-of-a-Line-and-a-Plane-直线和平面的相交"><a href="#3-2-Intersection-of-a-Line-and-a-Plane-直线和平面的相交" class="headerlink" title="3.2 Intersection of a Line and a Plane  直线和平面的相交"></a>3.2 Intersection of a Line and a Plane  直线和平面的相交</h2><p>得到了直线的参数方程，再来一个平面 $x+2y+4z=7$，平面和直线是否相交，交点在哪里。如何判断点相对于平面的位置。<br>将点的坐标带入平面方程，可判断点相对平面的位置。带入参数方程，可以求出交点。<strong>带入方程实际上是运动轨迹和平面法向量做点积。</strong> 如果t的系数为0，说明运动轨迹平行于平面。等式成立说明轨迹在平面上。   </p>
<h2 id="3-3-General-Parametric-Equations-the-Cycloid-参数方程组-摆线"><a href="#3-3-General-Parametric-Equations-the-Cycloid-参数方程组-摆线" class="headerlink" title="3.3 General Parametric Equations: the Cycloid 参数方程组:摆线"></a>3.3 General Parametric Equations: the Cycloid 参数方程组:摆线</h2><p>除直线外，更普遍的是点的任意运动，如何用参数方程表示，以摆线为例子。<br>摆线：半径为a的轮子，沿着x轴方向滚动，轮子边缘上的一点产生的轨迹。<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%80%EF%BC%9A%E5%90%91%E9%87%8F%E5%92%8C%E7%9F%A9%E9%98%B5-%E7%AC%94%E8%AE%B0/Cycloid_f.gif" alt="Cycloid"></p>
<p>参数有很多种选择，这里使用角度代替时间参数t，这样可以使结果更加简单。</p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%80%EF%BC%9A%E5%90%91%E9%87%8F%E5%92%8C%E7%9F%A9%E9%98%B5-%E7%AC%94%E8%AE%B0/Cycloid_h.png" alt="Cycloid"></p>
<script type="math/tex; mode=display">\overrightarrow{OP}=\overrightarrow{OT}+\overrightarrow{TC}+\overrightarrow{CP}</script><script type="math/tex; mode=display">\overrightarrow{OT}=\left \langle r\theta,0 \right \rangle</script><script type="math/tex; mode=display">\overrightarrow{TC}=\left \langle 0,r \right \rangle</script><script type="math/tex; mode=display">\overrightarrow{CP}=\left \langle -r\sin{\theta},-r\cos{\theta} \right \rangle</script><p>得到P的参数方程为：</p>
<script type="math/tex; mode=display">\overrightarrow{OP}=\left \langle r\theta-r\sin{\theta},r-r\cos{\theta} \right \rangle</script><h2 id="3-4-Point-Cusp-on-Cycloid-摆线的顶点"><a href="#3-4-Point-Cusp-on-Cycloid-摆线的顶点" class="headerlink" title="3.4 Point (Cusp) on Cycloid 摆线的顶点"></a>3.4 Point (Cusp) on Cycloid 摆线的顶点</h2><p>仔细思考，摆线在接近底面的时候到底是什么样子？<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%80%EF%BC%9A%E5%90%91%E9%87%8F%E5%92%8C%E7%9F%A9%E9%98%B5-%E7%AC%94%E8%AE%B0/Cycloid-%E9%A1%B6%E7%82%B9.png" alt="摆线的顶点"></p>
<p>想要知道原点处到底发生了什么，就要自己的研究参数方程了，首先要做的就是近似。大家都知道的是，当角度足够小的时候，</p>
<script type="math/tex; mode=display">\sin{\theta}\sim 0</script><script type="math/tex; mode=display">\cos{\theta}\sim 1</script><p>但是将这个近似代入原参数方程中，并不能提供好的结果，我们需要更加准确的近似：<strong>泰勒展开</strong>。   </p>
<blockquote>
<p>定理：<br>设 n 是一个正整数。如果定义在一个包含 a 的区间上的函数 f 在 a 点处 n+1 次可导，那么对于这个区间上的任意 x，都有：</p>
<script type="math/tex; mode=display">f(x)=f(a)+\frac{f'(a)}{1!}(x-a)+\frac{f^{(2)}(a)}{2!}(x-a)^2+...+\frac{f^{(n)}(a)}{n!}(x-a)^n+R_n(x)</script><p>其中的多项式称为函数在$a$处的泰勒展开式，剩余的 <script type="math/tex">R_n(x)</script> 是泰勒公式的余项，是 $(x−a)^n$ 的高阶无穷小。</p>
</blockquote>
<p>得到三角函数的三阶泰勒展开：</p>
<script type="math/tex; mode=display">\sin(\theta)\approx\theta-\frac{1}{6}\theta^3</script><script type="math/tex; mode=display">\cos(\theta)\approx 1-\frac{1}{2}\theta^2</script><p>当半径为1，这时候的参数方程变成：   </p>
<script type="math/tex; mode=display">\overrightarrow{OP}=\left \langle \frac{1}{6}\theta^3,\frac{1}{2}\theta^2 \right \rangle</script><p>在原点处的斜率，当角度足够小时：</p>
<script type="math/tex; mode=display">\frac{y}{x}=\frac{3}{\theta}\rightarrow \infty</script><p>说明摆线在原点处有一个垂直的切线，选项是d。</p>
<h2 id="3-5-Velocity-and-Acceleration-速度和加速度"><a href="#3-5-Velocity-and-Acceleration-速度和加速度" class="headerlink" title="3.5  Velocity and Acceleration 速度和加速度"></a>3.5  Velocity and Acceleration 速度和加速度</h2><p>不用泰勒展开，换一个思路来研究点的运动，还是摆线，看看摆线的速度和加速度</p>
<script type="math/tex; mode=display">\overrightarrow{OP}=\left \langle r\theta-r\sin{\theta},r-r\cos{\theta} \right \rangle</script><p><strong>位置向量</strong> 可以表示任意时刻的点的坐标，角度和时间成正比，半径为1，以单位速度运动的摆线：</p>
<script type="math/tex; mode=display">\overrightarrow{r}=\left \langle t-\sin{t},1-\cos{t} \right \rangle</script><p><strong>速度向量（Velocity vector）：</strong>   </p>
<script type="math/tex; mode=display">\overrightarrow{v}=\frac{\mathrm{d} \overrightarrow{r}}{\mathrm{d} t}=
\left \langle \frac{\mathrm{d} x}{\mathrm{d} t},\frac{\mathrm{d} y}{\mathrm{d} t} \right \rangle=
\left \langle 1-\cos{t},\sin{t}\right \rangle</script><p>在t=0时刻时，速度为0。<br><strong>速率（speed）：</strong></p>
<script type="math/tex; mode=display">\left | \overrightarrow{v} \right |=\sqrt{v_x^2+v_y^2}=
\sqrt{2-2\cos{t}}</script><p>当$t=\pi$时，瞬时速率最大，这是点的运动速度是轮子速度的两倍。<br><strong>加速度（Acceleration）：</strong></p>
<script type="math/tex; mode=display">\overrightarrow{a}=\frac{\mathrm{d} \overrightarrow{v}}{\mathrm{d} t}=
\left \langle \sin{t},\cos{t}\right \rangle</script><p>在 t=0 时刻时，</p>
<script type="math/tex; mode=display">\overrightarrow{a}=
\left \langle 0,1\right \rangle</script><p>说明摆线在原点处只有垂直于x轴的向上加速度。</p>
<h2 id="3-6-Velocity-and-Arc-Length-速度和弧长"><a href="#3-6-Velocity-and-Arc-Length-速度和弧长" class="headerlink" title="3.6 Velocity and Arc Length 速度和弧长"></a>3.6 Velocity and Arc Length 速度和弧长</h2><p><strong>单位切向量（unit tangent vector）：</strong> 用来表示轨迹运动的方向。<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%80%EF%BC%9A%E5%90%91%E9%87%8F%E5%92%8C%E7%9F%A9%E9%98%B5-%E7%AC%94%E8%AE%B0/%E5%8D%95%E4%BD%8D%E5%88%87%E5%90%91%E9%87%8F.png" alt="单位切向量"></p>
<script type="math/tex; mode=display">\widehat{T}=\frac{\overrightarrow{v}}{\left | v \right |}</script><p><strong>弧长（arc length）：</strong> 点运动沿着轨迹的长度。</p>
<script type="math/tex; mode=display">\left | \frac{\mathrm{d} s}{\mathrm{d} t} \right |=
\mathrm{speed/速率}=
\left | \overrightarrow{v}\right |</script><p>求摆线的弧长，需要对速率进行积分</p>
<script type="math/tex; mode=display">\int_{0}^{2\pi}\sqrt{2-2\sin{t}} \mathrm{d}t</script><p>发现，这个积分不太容易算。怎么用向量的思想解决问题呢？重新来看速度向量，我们把它分解下</p>
<script type="math/tex; mode=display">\overrightarrow{v}=\frac{\mathrm{d} \overrightarrow{r}}{\mathrm{d} t}=
\frac{\mathrm{d} \overrightarrow{r}}{\mathrm{d} s}
\frac{\mathrm{d} s}{\mathrm{d} t}=
\widehat{T}\frac{\mathrm{d} s}{\mathrm{d} t}</script><p>发现第一部分近似于切向量，第二部分是速率，为什么可以把第一部分近似为切向量，如图所示：<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%80%EF%BC%9A%E5%90%91%E9%87%8F%E5%92%8C%E7%9F%A9%E9%98%B5-%E7%AC%94%E8%AE%B0/%E5%8D%95%E4%BD%8D%E5%88%87%E5%90%91%E9%87%8F%E8%BF%91%E4%BC%BC.png" alt="近似为单位切向量"><br>由于移动的距离s是位置向量的模，在单位时间段足够小时，就可以近似的认为两者的比例为单位切向量：</p>
<script type="math/tex; mode=display">\frac{\mathrm{d} \overrightarrow{r}}{\mathrm{d} s} \approx
\widehat{T}</script><p>现在新的速度方程也是又有大小，又有方向，而且聪明的使用了切向量的概念。</p>
<h2 id="3-7-例子：Kepler’s-Second-Law-开普勒第二定律"><a href="#3-7-例子：Kepler’s-Second-Law-开普勒第二定律" class="headerlink" title="3.7 例子：Kepler’s Second Law 开普勒第二定律"></a>3.7 例子：Kepler’s Second Law 开普勒第二定律</h2><p>这个例子说明为什么用向量的方法去分析运动是很好的方法。    </p>
<blockquote>
<p>普勒第二定律：<br>1.每个行星的运动都保持在一个平面内。<br>2.在相等时间内，太阳和运动着的行星的连线所扫过的面积都是相等的。   </p>
</blockquote>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E8%8B%A6%E5%A2%83/MIT%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%80%EF%BC%9A%E5%90%91%E9%87%8F%E5%92%8C%E7%9F%A9%E9%98%B5-%E7%AC%94%E8%AE%B0/%E5%BC%80%E6%99%AE%E5%8B%92%E7%AC%AC%E4%BA%8C%E5%AE%9A%E5%BE%8B2.png" alt="开普勒第二定律"></p>
<script type="math/tex; mode=display">面积=
\frac{1}{2}\left | \overrightarrow{r}\times\Delta\overrightarrow{r}\right |=
\frac{1}{2}\left | \overrightarrow{r}\times\overrightarrow{v}\right |\Delta t</script><p>根据开普勒第二定律，叉乘的模是常数，向量叉乘的方向是常数。也就是：</p>
<script type="math/tex; mode=display">\overrightarrow{r}\times\overrightarrow{v}=constant</script><script type="math/tex; mode=display">\frac{\mathrm{d} }{\mathrm{d} t}(\overrightarrow{r}\times\overrightarrow{v})=0</script><script type="math/tex; mode=display">\frac{\mathrm{d} \overrightarrow{r}}{\mathrm{d} t}\times \overrightarrow{v}+\overrightarrow{r}\times\frac{\mathrm{d} \overrightarrow{v}}{\mathrm{d} t}=0</script><script type="math/tex; mode=display">\overrightarrow{v}\times \overrightarrow{v}+\overrightarrow{r}\times\overrightarrow{a}=0</script><script type="math/tex; mode=display">\overrightarrow{r}\times\overrightarrow{a}=0</script><script type="math/tex; mode=display">\overrightarrow{r}\parallel\overrightarrow{a}</script><p>加速度是和位矢平行的。由于加速度由万有引力引起的，这个力是永远指向施力物体的，也就是太阳。现在发现，在向量的观念里，开普勒第二定律和牛顿万有引力定律有着异曲同工的妙处。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Vectors-Determinations-and-Planes-向量，行列式和平面&quot;&gt;&lt;a href=&quot;#1-Vectors-Determinations-and-Planes-向量，行列式和平面&quot; class=&quot;headerlink&quot; title=&quot;1. Vectors, Determinations and Planes 向量，行列式和平面&quot;&gt;&lt;/a&gt;1. Vectors, Determinations and Planes 向量，行列式和平面&lt;/h1&gt;&lt;h2 id=&quot;1-1-基础&quot;&gt;&lt;a href=&quot;#1-1-基础&quot; class=&quot;headerlink&quot; title=&quot;1.1 基础&quot;&gt;&lt;/a&gt;1.1 基础&lt;/h2&gt;&lt;p&gt;向量是一个既有大小又有方向的量。with both direction and magnitude/length。通过带箭头的直线将向量直观的表示出来。引入空间直角坐标系和单位向量是向量间计算的基础。   &lt;/p&gt;
&lt;p&gt;Pythagorean theory 毕达哥拉斯定理，勾股定理   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算向量的长度&lt;/strong&gt; $\left | \overrightarrow{a} \right |$，多维向量还是通过勾股定理计算。   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;向量的加法&lt;/strong&gt;    &lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\overrightarrow{A}+\overrightarrow{B}=\left \langle a_{1}+b_{1},a_{2}+b_{2} \right \rangle&lt;/script&gt;&lt;p&gt;向量是头尾加法，同一方向可以进行标量加法。    &lt;/p&gt;
    
    </summary>
    
      <category term="苦境" scheme="http://ihozh.com/categories/%E8%8B%A6%E5%A2%83/"/>
    
    
      <category term="微积分" scheme="http://ihozh.com/tags/%E5%BE%AE%E7%A7%AF%E5%88%86/"/>
    
      <category term="公开课" scheme="http://ihozh.com/tags/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
      <category term="18.02" scheme="http://ihozh.com/tags/18-02/"/>
    
  </entry>
  
  <entry>
    <title>埃拉托色尼筛选法巧解质数问题</title>
    <link href="http://ihozh.com/2017/05/11/%E5%9F%83%E6%8B%89%E6%89%98%E8%89%B2%E5%B0%BC%E7%AD%9B%E9%80%89%E6%B3%95%E5%B7%A7%E8%A7%A3%E8%B4%A8%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <id>http://ihozh.com/2017/05/11/埃拉托色尼筛选法巧解质数问题/</id>
    <published>2017-05-11T05:32:09.000Z</published>
    <updated>2017-05-12T03:35:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>质数问题很有趣，也是常见的程序员面试问题，例如，找出N以内的所有质数。</p>
</blockquote>
<p>这个问题本身不难，直觉可以使用排除法。例如，从2到N，每个数判断是否有1和它本身以外的其他因数。当然，聪明一点，会发现我们根本不需要遍历N以内的所有数来判断N是否为质数，最多实验N的平方根以内数就足够。因为，N有因数的话，那么至少有一半的因数不会超过N的开平方。要判断100是不是质数，<code>100 = 2*50 = 4*25 = 5*20 = 10*10</code>，只要判断10以内有无100的因数即可。使用这种方法的时间复杂度为 $O(n*sqrt(n))$。</p>
<a id="more"></a>
<p>有没有更快速的算法呢？当然是有的——埃拉托色尼筛选法。</p>
<h1 id="埃拉托色尼筛选法"><a href="#埃拉托色尼筛选法" class="headerlink" title="埃拉托色尼筛选法"></a>埃拉托色尼筛选法</h1><p>埃拉托色尼筛选法（Sieve of Eratosthenes）简称埃氏筛法，由古希腊数学家埃拉托色尼提出，核心思想非常简单，先看动图感受一下：<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E5%85%B0%E5%B1%B1/%E5%9F%83%E6%8B%89%E6%89%98%E8%89%B2%E5%B0%BC%E7%AD%9B%E9%80%89%E6%B3%95%E5%B7%A7%E8%A7%A3%E8%B4%A8%E6%95%B0%E9%97%AE%E9%A2%98Sieve_of_Eratosthenes_animation.gif" alt="Sieve of Eratosthenes"></p>
<p>首先将1排除，找到n以内所有质数方法：  </p>
<ol>
<li>创建从2到n的连续整数列表，(2,3,4,…,n)；  </li>
<li>初始化p=2，这是最小的质数；  </li>
<li>枚举所有p的倍数，除p外都标记为非质数，(2p,3p,4p,…)；</li>
<li>找到下一个没有标记大于p的数。如果没有，结束运算；如果有，将该值赋予p，重复步骤3;  </li>
<li>运算结束后，剩下所有未标记的数都是找到的质数。  </li>
</ol>
<p>这个算法的核心思想是：任何一个p值都是质数，如果存在一个合数，那么就应该存在一个质数都够标记它。算法的时间复杂度为O(n loglog n)。</p>
<p><strong>进一步简化的优化算法：</strong>   </p>
<ol>
<li>对于步骤3，可以不用从2p开始排除，而是直接从p^2开始。理由已经在开始讲过，所有的小于p^2的合数都因为有更小的因数而被排除。  </li>
<li>对于步骤4，当p^2大于n的时候停止计算。</li>
</ol>
<p><strong>另一个优化思路：</strong>只初始化奇数列表，这种方法可以被概括为轮分解(Wheel factorization)，是一种效率更高的寻找质数的办法。</p>
<h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><p>这里推荐python匿名函数的写法，和埃氏筛法一样简洁明了：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPrime</span><span class="params">(n)</span>:</span></div><div class="line">	<span class="keyword">return</span> filter(<span class="keyword">lambda</span> x: <span class="keyword">not</span> [x%i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(math.sqrt(x))+<span class="number">1</span>) <span class="keyword">if</span> x%i == <span class="number">0</span>], range(<span class="number">2</span>,n+<span class="number">1</span>))</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;质数问题很有趣，也是常见的程序员面试问题，例如，找出N以内的所有质数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个问题本身不难，直觉可以使用排除法。例如，从2到N，每个数判断是否有1和它本身以外的其他因数。当然，聪明一点，会发现我们根本不需要遍历N以内的所有数来判断N是否为质数，最多实验N的平方根以内数就足够。因为，N有因数的话，那么至少有一半的因数不会超过N的开平方。要判断100是不是质数，&lt;code&gt;100 = 2*50 = 4*25 = 5*20 = 10*10&lt;/code&gt;，只要判断10以内有无100的因数即可。使用这种方法的时间复杂度为 $O(n*sqrt(n))$。&lt;/p&gt;
    
    </summary>
    
      <category term="兰山" scheme="http://ihozh.com/categories/%E5%85%B0%E5%B1%B1/"/>
    
    
      <category term="Python" scheme="http://ihozh.com/tags/Python/"/>
    
      <category term="算法" scheme="http://ihozh.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Mac 命令行一键隐藏屏幕</title>
    <link href="http://ihozh.com/2017/05/07/Mac%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%A7%A3%E5%86%B3%E4%B8%80%E9%94%AE%E9%9A%90%E8%97%8F%E5%B1%8F%E5%B9%95%E5%92%8C%E5%9B%9E%E5%A4%8D/"/>
    <id>http://ihozh.com/2017/05/07/Mac通过命令行解决一键隐藏屏幕和回复/</id>
    <published>2017-05-08T02:16:49.000Z</published>
    <updated>2017-05-08T04:01:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>一键清屏这个功能非常好用，但是发现mac没有直接提供清屏的功能，有一些软件能够实现这个功能，但是实在没有必要。通过两行简单的命令行命令就可以实现。</p>
<p>新建’hideDesk.command’文件，command和sh文件都可以，command后缀直接执行。将下边代码粘贴在文件内：</p>
<a id="more"></a>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/sh</div><div class="line">let deskVis=$(defaults read com.apple.finder CreateDesktop -bool)</div><div class="line"></div><div class="line">if [ "$deskVis" = "1" ]; then</div><div class="line">	defaults write com.apple.finder CreateDesktop -bool false;killall Finder;say icons hidden</div><div class="line">else</div><div class="line">	defaults write com.apple.finder CreateDesktop -bool true;killall Finder;say icons visible</div><div class="line">fi</div></pre></td></tr></table></figure>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E5%85%B0%E5%B1%B1/Hide%20Desktop/hide_desktop1.gif" alt="shell code"></p>
<p>可以直接看到效果。如果不想要声音提示，可以删去say这一段。</p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E5%85%B0%E5%B1%B1/Hide%20Desktop/hide_desktop2.gif" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一键清屏这个功能非常好用，但是发现mac没有直接提供清屏的功能，有一些软件能够实现这个功能，但是实在没有必要。通过两行简单的命令行命令就可以实现。&lt;/p&gt;
&lt;p&gt;新建’hideDesk.command’文件，command和sh文件都可以，command后缀直接执行。将下边代码粘贴在文件内：&lt;/p&gt;
    
    </summary>
    
      <category term="兰山" scheme="http://ihozh.com/categories/%E5%85%B0%E5%B1%B1/"/>
    
    
      <category term="Mac" scheme="http://ihozh.com/tags/Mac/"/>
    
      <category term="小程序" scheme="http://ihozh.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="shell" scheme="http://ihozh.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Nginx + uWSGI 部署Django站点</title>
    <link href="http://ihozh.com/2017/05/04/Nginx+uwsgi%E9%83%A8%E7%BD%B2Django%E7%AB%99%E7%82%B9/"/>
    <id>http://ihozh.com/2017/05/04/Nginx+uwsgi部署Django站点/</id>
    <published>2017-05-04T07:10:29.000Z</published>
    <updated>2017-05-07T12:14:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Django有Apache和Nginx两种常见部署方式 </p>
<p>主要工具：  </p>
<ul>
<li>一台远程服务器</li>
<li>Nginx</li>
<li>uWSGI</li>
<li>Django</li>
</ul>
<a id="more"></a>
<p>知识点：</p>
<ul>
<li>站点结构</li>
<li>Nginx结构</li>
<li>debug方式</li>
</ul>
<p>主机使用的是DigitalOcean家的基础版ubuntu，版本16.01。</p>
<h1 id="从裸机开始的环境准备"><a href="#从裸机开始的环境准备" class="headerlink" title="从裸机开始的环境准备"></a>从裸机开始的环境准备</h1><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><p>zsh，oh-my-zsh，vimrc从github上pull过来，一切都是熟悉的感觉。<br>apt-get 要更新。</p>
<h2 id="Python3-pip-和-虚拟环境"><a href="#Python3-pip-和-虚拟环境" class="headerlink" title="Python3/pip 和 虚拟环境"></a>Python3/pip 和 虚拟环境</h2><p>主要是为了环境简洁和适应版本</p>
<h2 id="Nginx-安装"><a href="#Nginx-安装" class="headerlink" title="Nginx 安装"></a>Nginx 安装</h2><p>远程服务器这个是第一步的，没有服务器，开发调试都是头疼的事情。Nginx是一款反向代理服务器，可以让网站的内容呈现给客户。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> install</div><div class="line">sudo apt-get install nginx</div><div class="line"><span class="meta"></span></div><div class="line"># basic operation</div><div class="line">sudo /etc/init.d/nginx start</div><div class="line">sudo /etc/init.d/nginx stop</div><div class="line">sudo /etc/init.d/nginx restart</div><div class="line"></div><div class="line">or:</div><div class="line">sudo service nginx start</div><div class="line">sudo service nginx stop</div><div class="line">sudo service nginx restart</div></pre></td></tr></table></figure>
<p>启动后访问服务器ip，会看到<strong>Welcome to nginx!</strong>信息。  </p>
<h2 id="uWSGI-安装"><a href="#uWSGI-安装" class="headerlink" title="uWSGI 安装"></a>uWSGI 安装</h2><p>uWSGI是实现了WSGI的服务器。WSGI一个Web接口。提供规范化协议，提高服务器的工作效率。uWSGI本身已经可以胜任服务器的工作，为什么要再前面挡一个Nginx，这是出于更好的安全性，更有效率的工作和Nginx作为专业的服务器的优势。可以详见<a href="https://serverfault.com/questions/590819/why-do-i-need-nginx-when-i-have-uwsgi" target="_blank" rel="external">这个讨论</a>。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>install</div><div class="line">apt-get install python-dev</div><div class="line">sudo pip install uwsgi --upgrade</div></pre></td></tr></table></figure>
<p>用wWSGI挂起一个最简单的程序，创建一个文件命名test.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># test.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(env, start_response)</span>:</span></div><div class="line">    start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>,<span class="string">'text/html'</span>)])</div><div class="line">    <span class="comment">#return ["Hello World"] # python2</span></div><div class="line">    <span class="keyword">return</span> [<span class="string">b"Hello World"</span>] <span class="comment"># python3</span></div></pre></td></tr></table></figure>
<p>用wWSGI挂起：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uwsgi --http :8000 --wsgi-file test.py</div></pre></td></tr></table></figure>
<p>这条命令是说，使用http协议，8000端口，加载指定文件。文件很简单，收到GET请求后，返回<code>Hello World</code>，在浏览器输入<code>ip:8000</code>就可以看到结果了。</p>
<h2 id="安装Django"><a href="#安装Django" class="headerlink" title="安装Django"></a>安装Django</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>install</div><div class="line">pip install django</div><div class="line"><span class="meta"></span></div><div class="line">#create project</div><div class="line">django-admin.py startproject project-name</div><div class="line"><span class="meta"></span></div><div class="line">#create app</div><div class="line">python manage.py startapp app-name</div><div class="line"><span class="meta"></span></div><div class="line">#同步数据库</div><div class="line">python manage.py makemigrations</div><div class="line">python manage.py migrate</div><div class="line"><span class="meta"></span></div><div class="line">#开发服务器</div><div class="line">python manage.py runserver #localhost</div><div class="line">python manage.py runserver 0.0.0.0:8000  #ip:8000端口</div></pre></td></tr></table></figure>
<h1 id="理解Nginx服务器的结构"><a href="#理解Nginx服务器的结构" class="headerlink" title="理解Nginx服务器的结构"></a>理解Nginx服务器的结构</h1><p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E6%90%8F%E6%B5%AA/Nginx%20+%20uWSGI%20%E9%83%A8%E7%BD%B2Django%E7%AB%99%E7%82%B9/Nginx.png" alt="Nginx结构"></p>
<h2 id="最重要的文件-一开始就要加载"><a href="#最重要的文件-一开始就要加载" class="headerlink" title="最重要的文件:一开始就要加载"></a>最重要的文件:一开始就要加载</h2><p>默认下，Nginx会安装在<code>/usr/local/nginx</code>，所有的配置文件在<code>/etc/nginx</code>下，最主要的配置文件是 <code>/etc/nginx/nginx.conf</code>，这个文件建议放在git上，或者进行周期性备份</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.$(date "+%b_%d_%Y_%H.%M.%S")</div></pre></td></tr></table></figure>
<p><code>nginx.conf</code> 的结构如下： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">user www-data;</div><div class="line">worker_processes auto;</div><div class="line">pid /run/nginx.pid;</div><div class="line"></div><div class="line">events &#123;</div><div class="line">	worker_connections 768;</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;</div><div class="line">	......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>nginx.conf</code> 配置了主要的工作功能，<code>include</code>允许从后面的地址中找到配置文件，这样可以让主配置文件看起来更加精简，但是多层套用<code>include</code>也不推荐，让代码不易读。从默认的配置文件可以看出，<code>/etc/nginx/conf.d/</code>里所有的配置文件和<code>/etc/nginx/sites-enalbed/</code>里的配置文件都会在一开始被加载。log文件在<code>/var/log/nginx/</code>下。</p>
<h2 id="HTTP模块：全局配置"><a href="#HTTP模块：全局配置" class="headerlink" title="HTTP模块：全局配置"></a>HTTP模块：全局配置</h2><p>HTTP 模块会处理所有来自于网络的HTTP请求，这是Nginx的大门。<br>重点说下<code>/etc/nginx/sites-enalbed/</code>这个目录，它可以让不同的虚拟域名分开来。一般都是通过软连接将配置文件连接进这个目录，很容易修改，ngnix提供了一个配置模版：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp /etc/nginx/sites-available/default /etc/nginx/sites-available/example.com</div></pre></td></tr></table></figure>
<h2 id="Server模块：虚拟域名的配置"><a href="#Server模块：虚拟域名的配置" class="headerlink" title="Server模块：虚拟域名的配置"></a>Server模块：虚拟域名的配置</h2><p>在<code>/etc/nginx/sites-enalbed/</code>下配置的格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">	listen 80</div><div class="line">	root /usr/share/nginx/html;</div><div class="line">	</div><div class="line">	server_name localhost;</div><div class="line">	</div><div class="line">	location / &#123;</div><div class="line">	</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>server 模块是用户修改量最大的地方。对于每一个虚拟域名都可以有不同的配置文件。<code>/usr/share/nginx/html</code>这个路径现在已经是Nginx默认存放静态文件的路径了，不需要再配置。</p>
<p><strong>listen:</strong> 用来监听端口<br><strong>server_name:</strong> 自己网站的域名  </p>
<blockquote>
<p>是否可以使用不有效的域名呢？<br>完全可以，在局域网中，是一个很好的办法。</p>
</blockquote>
<p><strong>log:</strong> log文件，HTTP模块已经设置过，在server模块里可以更细致。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">access_log logs/example.access.log;</div><div class="line">access_log /srv/www/example.com/logs/access.log;</div></pre></td></tr></table></figure>
<p>建议使用完全路径，相对路径是与现在的路径下部分匹配的，不好控制。</p>
<p><strong>location:</strong>文件系统配置<br><code>location</code>设置可以让服务器去应答一些要服务器资源的请求。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># http://example.com/blog/</div><div class="line"></div><div class="line">location /blog/ &#123; &#125;</div></pre></td></tr></table></figure>
<p>注意字符串的匹配是最佳匹配，Nginx会选择匹配的最好的location。更复杂的匹配情况请参照官方文件。</p>
<h2 id="部署一个Nginx的最小Web结构"><a href="#部署一个Nginx的最小Web结构" class="headerlink" title="部署一个Nginx的最小Web结构"></a>部署一个Nginx的最小Web结构</h2><p>实践是检验真理的唯一标准，这里部署一个Nginx的最小结构，看看Nginx能不能正常工作。</p>
<p>linux 新建用户名用于部署Nginx并赋予权限.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">visudo</div><div class="line"><span class="meta">#</span> 添加权限：</div><div class="line">username    ALL=(ALL) ALL</div></pre></td></tr></table></figure>
<p>将<code>nginx.conf</code>用户名修改为当前用户。<br>在当前用户的根目录下创建如下结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mysite:</div><div class="line">	- mysite.conf</div><div class="line">	- www</div><div class="line">	- media</div><div class="line">		-test.png	</div><div class="line">	- log</div></pre></td></tr></table></figure>
<p>最简单的目标就是通过ip访问网站里的静态内容。简单的配置下，注意使用绝对路径：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">	listen 8000;</div><div class="line">	server_name mysite.com</div><div class="line">	charset utf_8;</div><div class="line"></div><div class="line">	access_log /home/username/mysite/log/access.log;</div><div class="line">	error_log /home/username/mysite/log/error_log;</div><div class="line"></div><div class="line">	location /media/ &#123;</div><div class="line">		alias /home/username/mysite/media/;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"># 命令行软连接到Nginx</div><div class="line">sudo ln -s /home/username/mysite/mysite.conf /etc/nginx/sites-enabled/</div></pre></td></tr></table></figure>
<p>重启Nginx后，在 <code>http://mysite.com/media/test.png</code>能够看到正常显示内容就说名Nginx正常工作了。log文件显示正常。</p>
<h2 id="常见的错误"><a href="#常见的错误" class="headerlink" title="常见的错误"></a>常见的错误</h2><h3 id="403-forbidden"><a href="#403-forbidden" class="headerlink" title="403 forbidden"></a>403 forbidden</h3><p>这里就要注意下用户名了，很多时候登录一台主机用户是root，而Nginx用户不是root，所以忽略了用户名的部署多会遇到这个问题。  </p>
<ol>
<li>可以将Nginx的用户名改为root，这样风险会很大。  </li>
<li>网站静态内容部署在当前用户目录下，如列子所示。  </li>
<li>在<code>/usr/share/nginx/html</code>下部署静态文件或软连接到网站目录。  </li>
</ol>
<h3 id="404-notfound"><a href="#404-notfound" class="headerlink" title="404 notfound"></a>404 notfound</h3><p>一般出现这个问题是目录的配置出现问题，使用绝对路径可解决</p>
<h2 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h2><p>最好的办法就是log文件了，每次的请求，错误记录都会非常详细。</p>
<h1 id="理解Django部署结构"><a href="#理解Django部署结构" class="headerlink" title="理解Django部署结构"></a>理解Django部署结构</h1><p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E6%90%8F%E6%B5%AA/Nginx%20+%20uWSGI%20%E9%83%A8%E7%BD%B2Django%E7%AB%99%E7%82%B9/djangoStructureAll.png" alt="djangoe结构"></p>
<h2 id="每个环节都要理解"><a href="#每个环节都要理解" class="headerlink" title="每个环节都要理解"></a>每个环节都要理解</h2><p>到现在为止，已经可以分别用Nginx和uWSGI挂起服务器了。说明这两个部分都是通的：  </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E6%90%8F%E6%B5%AA/Nginx%20+%20uWSGI%20%E9%83%A8%E7%BD%B2Django%E7%AB%99%E7%82%B9/web-Server.png" alt="web-server"></p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E6%90%8F%E6%B5%AA/Nginx%20+%20uWSGI%20%E9%83%A8%E7%BD%B2Django%E7%AB%99%E7%82%B9/web-uWSGI-Python.png" alt="web-uWSGI-Python">  </p>
<p><strong>用uWSGI挂起Django：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uwsgi --http :8000 --module mysite.wsgi</div></pre></td></tr></table></figure>
<p>这里sWSGI会找到 mysite下的wsgi的配置文件，即<code>mysite/wsgi.py</code>如果看到Django的“it worked！”信息，则说明Django被成功挂起。</p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E6%90%8F%E6%B5%AA/Nginx%20+%20uWSGI%20%E9%83%A8%E7%BD%B2Django%E7%AB%99%E7%82%B9/web-uWSGI-Django.png" alt="web-uWSGI-Django"> </p>
<h2 id="通过socket连接Nginx和uWSGI"><a href="#通过socket连接Nginx和uWSGI" class="headerlink" title="通过socket连接Nginx和uWSGI"></a>通过socket连接Nginx和uWSGI</h2><p>socket中文翻译为套接字，它的作用就像一个连接器，比方说把两段水管连接起来，每段管子都有自己不同的编号，下面就来试验下套接字的作用。<br>带socket的Nginx配置多了这个部分：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">upstream django &#123;</div><div class="line">	# server unit:///path/to/yourmysite/mysite.sock;</div><div class="line">	server 127.0.0.1:8022; #for a webport socket</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是要说明监听来自8022端口的请求，8022口做什么了呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uwsgi --socket :8022 --wsgi-file test.py</div></pre></td></tr></table></figure>
<p>8022挂起了最先的python测试文件，如果有GET请求，则返回hello world。Nginx则设置为监听8023端口。通过socket，有检测到8023口的外部请求，则交给8022端口去处理，这就是socket的作用，非常灵活。也说明了这一套结构都通了：</p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E6%90%8F%E6%B5%AA/Nginx%20+%20uWSGI%20%E9%83%A8%E7%BD%B2Django%E7%AB%99%E7%82%B9/Web-Nginx-Socket-uWSGI-Python.png" alt="Web-Nginx-Socket-uWSGI-Python"></p>
<h2 id="Django-sockect"><a href="#Django-sockect" class="headerlink" title="Django sockect"></a>Django sockect</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">upstream django &#123;</div><div class="line">    server unit:///path/to/yourmysite/mysite.sock;</div><div class="line">    # server 127.0.0.1:8022; #for a webport socket</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重启Nginx，挂起uWSGI：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uwsgi --socket mysite.sock --wsgi-file test.py</div></pre></td></tr></table></figure>
<p>在当前项目下可以看到生成了空的文件mysite.sock，2023口测试通过。</p>
<p>最后拉起整个Django项目：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uwsgi --socket mysite.sock --module mysite.wsgi</div></pre></td></tr></table></figure>
<p>看到Django工作界面，完成，Done！<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/%E6%90%8F%E6%B5%AA/Nginx%20+%20uWSGI%20%E9%83%A8%E7%BD%B2Django%E7%AB%99%E7%82%B9/Web-Nginx-Socket-uWSGI-Django.png" alt="Web-Nginx-Socket-uWSGI-Python"></p>
<h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><h3 id="connect-to-unix-mysite-sock-failed-2-No-such-file-or-directory"><a href="#connect-to-unix-mysite-sock-failed-2-No-such-file-or-directory" class="headerlink" title="connect() to unix:mysite.sock failed (2: No such file or directory)"></a>connect() to unix:mysite.sock failed (2: No such file or directory)</h3><p>基本是路径设置问题，upstrem和socket都要使用绝对路径。</p>
<h3 id="connect-to-uunix-mysite-sock-failed-13-Permission-denied"><a href="#connect-to-uunix-mysite-sock-failed-13-Permission-denied" class="headerlink" title="connect() to uunix:mysite.sock failed (13: Permission denied)"></a>connect() to uunix:mysite.sock failed (13: Permission denied)</h3><p>添加socket权限：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uwsgi --socket mysite.sock --wsgi-file test.py --chmod-socket=664 # (more sensible)</div></pre></td></tr></table></figure>
<p>参考资料：<br><a href="https://docs.djangoproject.com/en/1.11/" target="_blank" rel="external">Django Document</a> django官方最权威的参考文档<br><a href="http://uwsgi-docs.readthedocs.io/en/latest/tutorials/Django_and_nginx.html" target="_blank" rel="external">Setting up Django and your web server with uWSGI and nginx</a> uWSGI提供的参考文档，有些小问题<br><a href="https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-uwsgi-and-nginx-on-ubuntu-16-04#setting-up-the-uwsgi-application-server" target="_blank" rel="external">How To Serve Django Applications with uWSGI and Nginx on Ubuntu 16.04</a> DigitalOcean提供的部署指导<br><a href="https://www.linode.com/docs/web-servers/nginx/how-to-configure-nginx" target="_blank" rel="external">How to Configure nginx</a> 如何配置Nginx</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django有Apache和Nginx两种常见部署方式 &lt;/p&gt;
&lt;p&gt;主要工具：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一台远程服务器&lt;/li&gt;
&lt;li&gt;Nginx&lt;/li&gt;
&lt;li&gt;uWSGI&lt;/li&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="搏浪" scheme="http://ihozh.com/categories/%E6%90%8F%E6%B5%AA/"/>
    
    
      <category term="Nginx" scheme="http://ihozh.com/tags/Nginx/"/>
    
      <category term="uWSGI" scheme="http://ihozh.com/tags/uWSGI/"/>
    
      <category term="Django" scheme="http://ihozh.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>学生可享受的优惠汇总-持续更新</title>
    <link href="http://ihozh.com/2017/05/03/%E5%AD%A6%E7%94%9F%E5%8F%AF%E4%BA%AB%E5%8F%97%E7%9A%84%E4%BC%98%E6%83%A0%E6%B1%87%E6%80%BB-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
    <id>http://ihozh.com/2017/05/03/学生可享受的优惠汇总-持续更新/</id>
    <published>2017-05-03T08:39:39.000Z</published>
    <updated>2017-05-03T09:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>撸羊毛要从学生抓起</p>
<p>2017年5月3日 更新</p>
<h2 id="技术类-github-学生开发包"><a href="#技术类-github-学生开发包" class="headerlink" title="(技术类) github 学生开发包"></a>(技术类) github 学生开发包</h2><p>Student Developer Pack, <a href="https://education.github.com/pack" target="_blank" rel="external">申请链接</a> </p>
<p>实践才是硬道理，码农也要赢在起跑线上</p>
<a id="more"></a>
<p>包括：</p>
<ul>
<li>ATOM：免费使用震撼的ATOM编辑器</li>
<li>AWS：亚马逊免费云技术学习，最高$110额度奖励</li>
<li>Bitnami：开源web服务商，一年免费</li>
<li>CART：数据分析平台，2年免费使用升级服务</li>
<li>CrowdFlower：数据服务公司，可使用他家数据平台</li>
<li>DataDog：他家专做系统监控，专业账户，免费2年使用</li>
<li>DigitalOcean：云服务提供商，$50额度奖励</li>
<li>Flatrion School：编程培训界的哈佛商业学院，价值$149的一月会员</li>
<li>GitHub：版本控制代码托管，无限制的私有仓库功能</li>
<li>GitKraken：高逼格Git客户端，1年专业账户</li>
<li>HackHands：在线代码帮助中心，7*24小时，$25额度奖励</li>
<li>Microsoft Imagine：包括Azure，VisualStudio一票工具，免费</li>
<li>Namecheap：域名提供商，一年SSL证书，一年.me域名。</li>
<li>SendGrid：邮件服务商，每月15K免费电子邮件</li>
<li>Stripe：在线移动支付工具，首1000刀免除手续费</li>
<li>Taplytics：动态A/B测试，免费6个月</li>
<li>Thinkful：在线编程学习，一个月免费学习</li>
<li>Transiffex：位置信息平台，一年免费Starter Plan</li>
<li>Travis CI：持续集成，可private build</li>
<li>Udacity：硅谷在线计算机学习，一个月免费学习任何时候课程</li>
<li>UnrealEngine：游戏引擎，免费使用</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;撸羊毛要从学生抓起&lt;/p&gt;
&lt;p&gt;2017年5月3日 更新&lt;/p&gt;
&lt;h2 id=&quot;技术类-github-学生开发包&quot;&gt;&lt;a href=&quot;#技术类-github-学生开发包&quot; class=&quot;headerlink&quot; title=&quot;(技术类) github 学生开发包&quot;&gt;&lt;/a&gt;(技术类) github 学生开发包&lt;/h2&gt;&lt;p&gt;Student Developer Pack, &lt;a href=&quot;https://education.github.com/pack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;申请链接&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;实践才是硬道理，码农也要赢在起跑线上&lt;/p&gt;
    
    </summary>
    
      <category term="兰山" scheme="http://ihozh.com/categories/%E5%85%B0%E5%B1%B1/"/>
    
    
      <category term="生活" scheme="http://ihozh.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>搭建经济的个人站点</title>
    <link href="http://ihozh.com/2017/05/03/%E6%90%AD%E5%BB%BA%E7%BB%8F%E6%B5%8E%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%AB%99%E7%82%B9/"/>
    <id>http://ihozh.com/2017/05/03/搭建经济的个人站点/</id>
    <published>2017-05-03T06:44:32.000Z</published>
    <updated>2017-05-04T20:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天看到阿里云给共享虚拟主机做广告，免费一年的虚拟主机加上安全服务一共六元，心里一动就拿下尝尝鲜。兴致勃勃地打开控制台，第一次体验阿里云的产品，看看究竟是何方圣神。</p>
<p>阿里云的虚拟主机权限很低，稍感失望。只能通过FTP上传文件和网站。而且要要绑定域名，备案后才能正常访问。这个6元的共享主机用来部署个人博客，文件系统都是非常不错的。这里特别说下，阿里云给学生提供特别的优惠，学生用户可以注册货真价实的ECS服务器，一个月不到10元，打了一折不到。<br><a id="more"></a></p>
<p>6元用到阿里云的服务也是值的，但是如果一定要找免费的空间的话，也不是没有。一个是在github page可搭建hexo的博客，还有一个就是<a href="https://www.000webhost.com/964022.html" target="_blank" rel="external">000webhost</a>（也就是三蛋网）的免费空间。github page搭建稍微麻烦，三蛋网却提供一键傻瓜式搭建个人站点。1分钟就可登录自己wordpress博客了。发现三蛋会给新的博客添加自己的评论，不知这种算不算是防不胜防的广告，天底下没有免费的午餐嘛。还有个缺点，三蛋说是提供FTP，但是我换了多个工具都没有和服务器连接成功，倒是他家自带的网页传输一直好用。</p>
<p>又想有一台服务器，可以随便折腾，又不想备案，那么境外的云服务商就是最好的选择。vultr，digitalocean，Linode算是差不多的三家，一个月5刀的服务器差距不大，vultr最低到2.5刀。而且这三家都是注册就送，买一送一，也就是说充10刀送十刀。按时间收费的服务器对于我这种小农来说真是福音。一年的费用就是一顿饭钱，非常爽啊。现在自己在digitalocean部署了django网站，非常顺利，到国内的延迟也稳定在200ms。顺便提下三家的控制台，digitalocean最简单，除了基本信息和监控好像就没啥了，就是简洁。vultr，linode就专业的多，功能也多，还有通过手机app监控控制服务器的功能。</p>
<p>为啥没提AWS和Azure，计时收费花花的开着服务器就是开着烧钱机啊。虽然aws给每个账号第一年有免费的ec2提供，国内访问也是一大问题。但是AWS的云服务真的是目前用过最好的了，控制台就是行业的标杆。</p>
<p>最后提供资源链接：</p>
<p><a href="digitalocean">000webhost</a> 免费空间<br><a href="https://m.do.co/c/10c818488510" target="_blank" rel="external">DigitalOcean</a> 通过连接可获得$10奖励<br><a href="https://www.linode.com/?r=10daa75601f70e38a05c192f47281fb795c9c60f" target="_blank" rel="external">Linode</a> 通过连接可获得$10奖励  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天看到阿里云给共享虚拟主机做广告，免费一年的虚拟主机加上安全服务一共六元，心里一动就拿下尝尝鲜。兴致勃勃地打开控制台，第一次体验阿里云的产品，看看究竟是何方圣神。&lt;/p&gt;
&lt;p&gt;阿里云的虚拟主机权限很低，稍感失望。只能通过FTP上传文件和网站。而且要要绑定域名，备案后才能正常访问。这个6元的共享主机用来部署个人博客，文件系统都是非常不错的。这里特别说下，阿里云给学生提供特别的优惠，学生用户可以注册货真价实的ECS服务器，一个月不到10元，打了一折不到。&lt;br&gt;
    
    </summary>
    
      <category term="搏浪" scheme="http://ihozh.com/categories/%E6%90%8F%E6%B5%AA/"/>
    
    
      <category term="Web" scheme="http://ihozh.com/tags/Web/"/>
    
      <category term="服务器" scheme="http://ihozh.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>SSL初探</title>
    <link href="http://ihozh.com/2017/04/30/SSL%E5%88%9D%E6%8E%A2/"/>
    <id>http://ihozh.com/2017/04/30/SSL初探/</id>
    <published>2017-04-30T07:03:55.000Z</published>
    <updated>2017-05-03T19:39:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要了解一些关于SSL的知识，绘制一张思维导图，看起来轻松多了。<br>SSL(Secure Sockets Layer 安全套接层)，是https的主战场。曾经的http用户和服务器之间是明文传播，安全性可想而知了。https 也就是http over SSL，服务器和用户之间传送的信息是加密过的。<a id="more"></a>对于一个商业性的网站来说，SSL是必须的，颁发SSL的机构不少，从昂贵到免费，应有尽有。当然鼎鼎大名的就要数领头羊Symantec了。SSL证书的选择也要根据自己网站的规模，没有最好，只有更好。SSL也不能保证网络的绝对安全。WoSign 和 StartCom 已经被苹果和多家主流浏览器商封杀，而被当时他们喷击的免费SSL机构let’s encrypt却走向了主流。<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/techWebSecuritySSL.jpg" alt="webSSL"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近需要了解一些关于SSL的知识，绘制一张思维导图，看起来轻松多了。&lt;br&gt;SSL(Secure Sockets Layer 安全套接层)，是https的主战场。曾经的http用户和服务器之间是明文传播，安全性可想而知了。https 也就是http over SSL，服务器和用户之间传送的信息是加密过的。
    
    </summary>
    
      <category term="搏浪" scheme="http://ihozh.com/categories/%E6%90%8F%E6%B5%AA/"/>
    
    
      <category term="Web" scheme="http://ihozh.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>eclipse搭建scala语言的spark环境</title>
    <link href="http://ihozh.com/2016/04/17/eclipse%E6%90%AD%E5%BB%BAscala%E8%AF%AD%E8%A8%80%E7%9A%84spark%E7%8E%AF%E5%A2%83/"/>
    <id>http://ihozh.com/2016/04/17/eclipse搭建scala语言的spark环境/</id>
    <published>2016-04-17T04:24:00.000Z</published>
    <updated>2017-05-01T06:58:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>在eclipse上搭建使用Scala IDE 和 Maven 的 Spark 项目。<br><a id="more"></a><br>系统：OS X EI Capitan 10.11.4<br>Eclipse: Mars.2<br>要确定eclipse为Java环境 (JDK6,JDK7 or JDK8)  </p>
<h2 id="安装scala-IDE-plugin"><a href="#安装scala-IDE-plugin" class="headerlink" title="安装scala IDE plugin"></a>安装scala IDE plugin</h2><p>最简单的方法直接在scala官网下载IDE，<a href="http://scala-ide.org/download/sdk.html" target="_blank" rel="external">scala IDE</a>    </p>
<p>如果在现有的eclipse上加入scala插件，在<a href="http://scala-ide.org/download/current.html" target="_blank" rel="external">这里</a>找到最新的插件版本   </p>
<p>eclipse-&gt;Help-&gt;Install New Software<br>在work with栏里输入路径：   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://download.scala-ide.org/sdk/lithium/e44/scala211/stable/site</div></pre></td></tr></table></figure>
<p>选择全部安装</p>
<p>安装完成后会自动弹出或者通过菜单栏进入scala-&gt;Run Setup Diagnostics，勾选Use recommended default settings 并将 eclipse.ini中heap size 设置为1280M（-Xmx1280M）。如果不设置会出现outof memory 的报错。   </p>
<p>这时已经可以运行scala的项目了。如果要运行spark项目还需要maven进行项目管理。   </p>
<h2 id="安装scala-maven管理插件-不必须"><a href="#安装scala-maven管理插件-不必须" class="headerlink" title="安装scala maven管理插件,不必须"></a>安装scala maven管理插件,不必须</h2><p>默认的maven插件是不包括m2eclipse-scala的，若果没有，在eclipse-&gt;Help-&gt;Install New Software下输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://alchim31.free.fr/m2e-scala/update-site/</div></pre></td></tr></table></figure>
<p>安装全部</p>
<h2 id="建立maven项目"><a href="#建立maven项目" class="headerlink" title="建立maven项目"></a>建立maven项目</h2><p>新建maven项目，在pom中配置：   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">     &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;</div><div class="line">     &lt;artifactId&gt;spark-core_2.10&lt;/artifactId&gt;</div><div class="line">     &lt;version&gt;1.5.2&lt;/version&gt;</div><div class="line">   &lt;/dependency&gt;</div><div class="line">   &lt;dependency&gt;</div><div class="line">     &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;</div><div class="line">     &lt;artifactId&gt;hadoop-client&lt;/artifactId&gt;</div><div class="line">     &lt;version&gt;2.6.0&lt;/version&gt;</div><div class="line">   &lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>注意由于要在EMR上运行程序，所以版本号选择与EMR上版本号一致。</p>
<p>右键项目-&gt;configure，选择引入scala环境，这时会看到编译错误<br>右键项目-&gt;properties-&gt;Scala Compiler-&gt;Use Project Settings-&gt;Fixe Scala Installation:2.10.6   </p>
<p>这时scala语言的spark全部搭建完成，在src下新建scala对象便可以写自己的程序了。这时可以把java改为scala了。    </p>
<p>视频资料：<a href="https://www.youtube.com/watch?v=aB4-RD_MMf0" target="_blank" rel="external">https://www.youtube.com/watch?v=aB4-RD_MMf0</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在eclipse上搭建使用Scala IDE 和 Maven 的 Spark 项目。&lt;br&gt;
    
    </summary>
    
      <category term="搏浪" scheme="http://ihozh.com/categories/%E6%90%8F%E6%B5%AA/"/>
    
    
      <category term="spark" scheme="http://ihozh.com/tags/spark/"/>
    
      <category term="scala" scheme="http://ihozh.com/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title>方寸间的壮美河山（1）下</title>
    <link href="http://ihozh.com/2016/04/15/%E3%80%8A%E4%B8%80%E7%9B%92%E5%93%81%E9%82%AE%E3%80%8B%E6%96%B9%E5%AF%B8%E9%97%B4%E7%9A%84%E5%A3%AE%E7%BE%8E%E6%B2%B3%E5%B1%B1%EF%BC%881%EF%BC%89%E4%B8%8B/"/>
    <id>http://ihozh.com/2016/04/15/《一盒品邮》方寸间的壮美河山（1）下/</id>
    <published>2016-04-15T22:53:52.000Z</published>
    <updated>2016-04-16T03:08:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者： 一盒<br>微信： zyh_1991   </p>
<h3 id="1997-16-黄山"><a href="#1997-16-黄山" class="headerlink" title="1997-16 黄山"></a>1997-16 黄山</h3><p>继特57《黄山风光》发行34年后，1997年10月中国邮政又发行了《黄山》特种邮票，志号为1997-16。这套邮票一共八枚，由版画名家诗松龄先生设计，版别为套票小版张。套票小版张是</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者： 一盒&lt;br&gt;微信： zyh_1991   &lt;/p&gt;
&lt;h3 id=&quot;1997-16-黄山&quot;&gt;&lt;a href=&quot;#1997-16-黄山&quot; class=&quot;headerlink&quot; title=&quot;1997-16 黄山&quot;&gt;&lt;/a&gt;1997-16 黄山&lt;/h3&gt;&lt;p&gt;继特57《
    
    </summary>
    
      <category term="一盒品邮" scheme="http://ihozh.com/categories/%E4%B8%80%E7%9B%92%E5%93%81%E9%82%AE/"/>
    
    
      <category term="一盒品邮" scheme="http://ihozh.com/tags/%E4%B8%80%E7%9B%92%E5%93%81%E9%82%AE/"/>
    
  </entry>
  
  <entry>
    <title>《一盒品邮》方寸间的壮美河山（1）上</title>
    <link href="http://ihozh.com/2016/04/07/%E3%80%8A%E4%B8%80%E7%9B%92%E5%93%81%E9%82%AE%E3%80%8B%E6%96%B9%E5%AF%B8%E9%97%B4%E7%9A%84%E5%A3%AE%E7%BE%8E%E6%B2%B3%E5%B1%B1%EF%BC%881%EF%BC%89/"/>
    <id>http://ihozh.com/2016/04/07/《一盒品邮》方寸间的壮美河山（1）/</id>
    <published>2016-04-07T07:41:58.000Z</published>
    <updated>2016-04-16T04:25:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者: 一盒<br>微信: zyh_1991<br>自古神仙清修境，今有三山睥睨之。   </p>
<p>在新中国的邮票中，自然山川的主题无疑是一道最亮丽的风景。即使是在方寸中，仍然不失原景，要么大气磅礴，要么温婉灵动的神韵，再加以设计师的独特写意，使这些邮票至今散发着无尽的韵味。  </p>
<p>笔者在学生时代就已经将名山系列基本收集齐全。该系列除了部分主题入手难度较大，整体非常适合初级的集邮爱好者。     </p>
<a id="more"></a>   
<p>中国名山首推五岳，但在邮票世界，五岳的成就却远逊于三山，所以方寸之间当属三山。三山五岳是个成语，出于清人曹寅的《舟中望惠山举酒调培山》：“三山五岳渺何许？云烟汗漫空竛竮。”一句。其实已经泛指中国名山。但是还是有人愿意将其一一指定，就像五湖四海，也有好事之人一定要说出是哪五个湖，哪四片海。强迫症患者看来是古来就有了。而至现代，也不妨旅游景区给自己加一个噱头。   </p>
<p>中国有着很深厚的名山文化，这个文化是受到道教的影响。但凡烟波飘渺，云雾缭绕之处，便让人产生对“神”和“仙”的向往。在《史记卷二十八封禅书》和《史记秦始皇本纪中》都有过记载，“海中有三神山,名曰蓬莱、方丈、瀛洲”，山上有神仙居住，金屋银瓦，长生不老药。这是古时三山原型。那时五岳已经有所名气，五岳的方位也是相对中原而言。随着后来文化南迁, 可能是古人惊羡于南方山水之美，所以在南方又选了三座山代替了传说中的三座神山，也就逐渐形成了现在三山的的概念。</p>
<h2 id="黄山"><a href="#黄山" class="headerlink" title="黄山"></a>黄山</h2><p>黄山位于安徽省黄山市，明人徐霞客曾赞道：“登黄山，天下无山，观止矣”，后来便演化成耳熟能详的“五岳归来不看山，黄山归来不看岳”一说。<br>首先介绍的这套邮票在名山系列中，不论设计还是价值，都是前无古人后无来者，她是名山系列邮票的标杆之作，也是新中国邮票的标杆之作，我没有任何理由不先从她开始讲起。   </p>
<h3 id="特57-黄山风景-比黄山更美的邮票"><a href="#特57-黄山风景-比黄山更美的邮票" class="headerlink" title="特57 黄山风景 比黄山更美的邮票"></a>特57 黄山风景 比黄山更美的邮票</h3><p>特57黄山风景发行于1963年，由邮票设计泰斗－孙传哲设计。全套邮票16枚，选取了黄山16处绝胜景致。<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/ihozh_stamp_%E7%89%B957%20%E9%BB%84%E5%B1%B1%E9%A3%8E%E6%99%AF.jpg" alt=""><br>黄山邮票之绝一绝在于取景。孙老师在1962中国摄影学会举办的《黄山风景摄影展览》中，精选出16帧照片作为蓝本进行二次创作，集合百家之长。以最简之笔法，凝炼出黄山之精髓。山川再美，只不过数笔之间，此乃二绝。全套邮票使用影雕套印技术，得益于60年北京邮票厂的建立，先进技术的使用，雕刻处尽显苍遒，影写出峰峦隐绰，此乃三绝。有此三绝，才有人评论：“比黄山实景更美！”。<br>面对实景，已经无法用语言形容，描述邮票，更绝词穷。笔者也只用一些诗句或是聊聊数语做简介，而将欣赏的权利完全交给读者。<br>4分：   </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/ihozh_stamp_%E7%8E%89%E5%B1%8F%E5%B3%B0.jpg" alt=""><br>玉屏峰：因峰壁如玉雕屏障，清人汪土宏有诗赞曰：“玉屏峙霄汉，鸟道度松门。”  峰顶建有文殊院，人文景观丰富，徐霞客誉为“黄山绝胜处”。</p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/ihozh_stamp_%E8%BF%8E%E5%AE%A2%E6%9D%BE.jpg" alt=""><br>迎客松：位于玉屏峰左侧，奇松乃黄山四绝之一，有“迎客”、“陪客”、“送客”三大名松。 前景松树雕刻细腻，背景简洁明亮。     </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/ihozh_stamp_%E5%90%8E%E6%B5%B7%E6%9D%BE%E7%9F%B3.jpg" alt=""><br>后海松石：奇松怪石，皆为四绝。“百道飞泉鸣玉佩，千寻石柱架琼峦。”，由远及近，层次鲜明，中间所绘，似航海观音。     </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/ihozh_stamp_%E6%B8%85%E5%87%89%E5%8F%B0.jpg" alt=""><br>清凉台： 为观黄山绝景云海的最佳处。玉屏楼观南海，清凉台望北海，排云亭看西海，白鹅岭赏东海，螯鱼峰眺天海。      </p>
<p>8分：<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/ihozh_stamp_%E5%A4%A9%E9%83%BD%E8%BF%9C%E7%9C%BA.jpg" alt=""><br>天都远眺： 天都峰与莲花峰、光明顶并称为黄山三大主峰。乾隆御题“天都九百仞，巍然切太虚”。 天都以奇险闻名，古诗有赞：“任它五岳归来客，一见天都也叫奇”。邮票让人不由自主从近及远，远眺天都峰，明人罗洪先应该也是由于此景，发出“何年白日骑鸾鹤，踏碎天都峰上云”之感慨。   </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/ihozh_stamp_%E5%89%AA%E5%88%80%E5%B3%B0.jpg" alt=""><br>剪刀峰：“欲借剪刀峰下景，好裁一半与平分”， 票中景色取自黄昏，阳面如熊熊烈火，使人望而生畏。    </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/ihozh_stamp_%E4%B8%87%E6%9D%BE%E6%9E%97.jpg" alt=""><br>万松林：李白诗句“昨夜谁为吴会吟，风生万壑振空林”应是由此景而发。群峦之间，松林摇曳，诗与画融为一体。    </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/ihozh_stamp_%E6%A2%A6%E7%AC%94%E7%94%9F%E8%8A%B1.jpg" alt=""><br>梦笔生花：仙人的一支笔斗，画尽黄山绝胜。笔锋的遗墨，化作一棵苍松。正如清人项黻所赞：“天然一管生花笔，写遍奇峰入画图。”    </p>
<p>10分：<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/ihozh_stamp_%E8%8E%B2%E8%8A%B1%E5%B3%B0.jpg" alt=""><br>莲花峰：黄山最高峰，李白赞曰“黄山四千仞，三十二莲峰。丹崔夹石柱，菡萏金芙蓉”。票面如雨后般清新，云雾缭绕，正是“真好造化”，“非人间也”。   </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/ihozh_stamp_%E8%A5%BF%E6%B5%B7%E4%BA%91%E6%BD%AE.jpg" alt=""><br>西海云潮：西海奇秀，由四周山峰围成巨大空间，如入画境，奇哉幻哉。    </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/ihozh_stamp_%E9%BB%84%E5%B1%B1%E5%8F%A4%E6%9D%BE.jpg" alt=""><br>黄山古松：描绘始信峰古松。始信峰，指古人到了这里才开始相信，黄山之奇。有言道：“不到始信峰，不知黄山松”     </p>
<p><img src="http://7xrzpr.com1.z0.glb.clouddn.com/ihozh_stamp_%E4%B8%9C%E6%B5%B7%E8%A7%82%E6%BD%AE.jpg" alt=""><br>东海观潮：描绘黄山云海日出，蕴红色调。 海到尽头天是岸，山登绝顶我为峰。   </p>
<p>20分：<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/ihozh_stamp_%E7%9F%B3%E7%AC%8B%E5%B3%B0.jpg" alt=""><br>石笋峰：黄山的石笋与雁荡的龙湫、匡庐的瀑布并称天下三奇。此处应有仙人下棋等景点，可邮票中并不明显。    </p>
<p>22分：<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/ihozh_stamp_%E7%9F%B3%E7%8C%B4%E8%A7%82%E6%B5%B7.jpg" alt=""><br>石猴观海：一巧石，静观潮起潮落。坐看人间兴废事，几经沧海变桑田。      </p>
<p>30分：<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/ihozh_stamp_%E7%8B%AE%E5%AD%90%E6%9E%97.jpg" alt=""><br>狮子林：清晨薄暮，熟睡的雄狮还未醒来，轻轻的，请不要吵醒它。      </p>
<p>50分：<br><img src="http://7xrzpr.com1.z0.glb.clouddn.com/ihozh_stamp_%E8%93%AC%E8%8E%B1%E4%B8%89%E5%B2%9B.jpg" alt=""><br>蓬莱三岛：每到云海弥漫，三座山峰山尖微露，犹如海上仙岛。    </p>
<p>设计者孙传哲一生情系黄山，在去世后留下未完成遗作《黄山图》，遗书中也要求将骨灰撒在黄山。</p>
<p>黄山风景凭借出色的设计，荣获建国三十周年最佳邮票奖。其价格在2013年也一度创下1万5000元记录。现在市场价依然在1万元附近，足见其珍贵。全套票以30分狮子林和50分蓬莱仙岛为精票，因其发行量稀少为100万枚。 集邮爱好者可以像笔者一样，即使入手盖销或者信销，仍然会满足感十足。     </p>
<h3 id="1997-16-黄山"><a href="#1997-16-黄山" class="headerlink" title="1997-16 黄山"></a>1997-16 黄山</h3><p>继特57《黄山风光》发行34年后，1997年10月中国邮政又发行了《黄山》特种邮票，志号为1997-16。这套邮票一共八枚，由版画名家诗松龄先生设计，连印成套票小版张。套票小版张是指将整套邮票在一版上呈现出来。由于特57占尽天时地利，在邮市的口碑高居不下，这套小版张在还未发行时就一直被人瞩目，能否在设计上超越前者一直是热门话题。这也是我国第一套套票小版。<br>同一题材的二次发行还有一个原因就是给99年的世界集邮展览筹款，所以我们可以注意到这八枚邮票的面值都为200分，高于当时的平信邮资80分。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者: 一盒&lt;br&gt;微信: zyh_1991&lt;br&gt;自古神仙清修境，今有三山睥睨之。   &lt;/p&gt;
&lt;p&gt;在新中国的邮票中，自然山川的主题无疑是一道最亮丽的风景。即使是在方寸中，仍然不失原景，要么大气磅礴，要么温婉灵动的神韵，再加以设计师的独特写意，使这些邮票至今散发着无尽的韵味。  &lt;/p&gt;
&lt;p&gt;笔者在学生时代就已经将名山系列基本收集齐全。该系列除了部分主题入手难度较大，整体非常适合初级的集邮爱好者。     &lt;/p&gt;
    
    </summary>
    
      <category term="一盒品邮" scheme="http://ihozh.com/categories/%E4%B8%80%E7%9B%92%E5%93%81%E9%82%AE/"/>
    
    
      <category term="一盒品邮" scheme="http://ihozh.com/tags/%E4%B8%80%E7%9B%92%E5%93%81%E9%82%AE/"/>
    
  </entry>
  
</feed>
